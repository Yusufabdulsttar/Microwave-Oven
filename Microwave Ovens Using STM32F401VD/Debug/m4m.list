
m4m.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000248c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002620  08002620  00012620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002648  08002648  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002648  08002648  00012648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002650  08002650  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002650  08002650  00012650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002654  08002654  00012654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000010  08002668  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002668  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009fe4  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b68  00000000  00000000  0002a024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002bb90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  0002c5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015767  00000000  00000000  0002cf18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b867  00000000  00000000  0004267f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008701a  00000000  00000000  0004dee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d4f00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002924  00000000  00000000  000d4f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002608 	.word	0x08002608

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08002608 	.word	0x08002608

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <lcd_4bit_intialize>:
/**
 * 
 * @param lcd
 * @return
 */
void lcd_4bit_intialize(const lcd_4bit_t *lcd){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]


        HAL_Delay(20);
 80004e0:	2014      	movs	r0, #20
 80004e2:	f000 fed5 	bl	8001290 <HAL_Delay>
        lcd_4bit_send_command(lcd, LCD_8BIT_MODE_2_LINE);
 80004e6:	2138      	movs	r1, #56	; 0x38
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f000 f82a 	bl	8000542 <lcd_4bit_send_command>
        HAL_Delay(5);
 80004ee:	2005      	movs	r0, #5
 80004f0:	f000 fece 	bl	8001290 <HAL_Delay>
        lcd_4bit_send_command(lcd, LCD_8BIT_MODE_2_LINE);
 80004f4:	2138      	movs	r1, #56	; 0x38
 80004f6:	6878      	ldr	r0, [r7, #4]
 80004f8:	f000 f823 	bl	8000542 <lcd_4bit_send_command>
        HAL_Delay(5);
 80004fc:	2005      	movs	r0, #5
 80004fe:	f000 fec7 	bl	8001290 <HAL_Delay>
        lcd_4bit_send_command(lcd, LCD_8BIT_MODE_2_LINE);
 8000502:	2138      	movs	r1, #56	; 0x38
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f000 f81c 	bl	8000542 <lcd_4bit_send_command>

        lcd_4bit_send_command(lcd, LCD_CLEAR);
 800050a:	2101      	movs	r1, #1
 800050c:	6878      	ldr	r0, [r7, #4]
 800050e:	f000 f818 	bl	8000542 <lcd_4bit_send_command>
        lcd_4bit_send_command(lcd, LCD_RETURN_HOME);
 8000512:	2102      	movs	r1, #2
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	f000 f814 	bl	8000542 <lcd_4bit_send_command>
        lcd_4bit_send_command(lcd, LCD_ENTRY_MODE_INC_SHIFT_OFF);
 800051a:	2106      	movs	r1, #6
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	f000 f810 	bl	8000542 <lcd_4bit_send_command>
        lcd_4bit_send_command(lcd, LCD_DISPLAY_ON_UNDERLINE_OFF_CURSOR_OFF);
 8000522:	210c      	movs	r1, #12
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f000 f80c 	bl	8000542 <lcd_4bit_send_command>
        lcd_4bit_send_command(lcd, LCD_4BIT_MODE_2_LINE);
 800052a:	2128      	movs	r1, #40	; 0x28
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f000 f808 	bl	8000542 <lcd_4bit_send_command>
        lcd_4bit_send_command(lcd, 0x80);
 8000532:	2180      	movs	r1, #128	; 0x80
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f000 f804 	bl	8000542 <lcd_4bit_send_command>

}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <lcd_4bit_send_command>:
 * @param command
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
void lcd_4bit_send_command(const lcd_4bit_t *lcd, uint8_t command){
 8000542:	b580      	push	{r7, lr}
 8000544:	b082      	sub	sp, #8
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
 800054a:	460b      	mov	r3, r1
 800054c:	70fb      	strb	r3, [r7, #3]

        /* R/W Pin connected to the GND -> Logic (0) "Hard Wired" */
        /* Write Logic (0) to the "Register Select" Pin to select the "Instruction Register"  */
		HAL_GPIO_WritePin((lcd->lcd_rs.port), (lcd->lcd_rs.pin), GPIO_PIN_RESET);
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4618      	mov	r0, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	685b      	ldr	r3, [r3, #4]
 8000558:	b29b      	uxth	r3, r3
 800055a:	2200      	movs	r2, #0
 800055c:	4619      	mov	r1, r3
 800055e:	f001 f969 	bl	8001834 <HAL_GPIO_WritePin>
        /* Send the Command through the (4-Pins" Data lines */
        lcd_send_4bits(lcd, command >> 4);
 8000562:	78fb      	ldrb	r3, [r7, #3]
 8000564:	091b      	lsrs	r3, r3, #4
 8000566:	b2db      	uxtb	r3, r3
 8000568:	4619      	mov	r1, r3
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	f000 f872 	bl	8000654 <lcd_send_4bits>
        /* Send the Enable Signal on the "E" Pin */
        lcd_4bit_send_enable_signal(lcd);
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f000 f8b3 	bl	80006dc <lcd_4bit_send_enable_signal>
        /* Send the Command through the (4-Pins" Data lines */
        lcd_send_4bits(lcd, command);
 8000576:	78fb      	ldrb	r3, [r7, #3]
 8000578:	4619      	mov	r1, r3
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f000 f86a 	bl	8000654 <lcd_send_4bits>
        /* Send the Enable Signal on the "E" Pin */
        lcd_4bit_send_enable_signal(lcd);
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f000 f8ab 	bl	80006dc <lcd_4bit_send_enable_signal>
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <lcd_4bit_send_char_data>:
 * @param data The data that we need to send to the LCD
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
void lcd_4bit_send_char_data(const lcd_4bit_t *lcd, uint8_t data){
 800058e:	b580      	push	{r7, lr}
 8000590:	b082      	sub	sp, #8
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
 8000596:	460b      	mov	r3, r1
 8000598:	70fb      	strb	r3, [r7, #3]
  
        /* R/W Pin connected to the GND -> Logic (0) "Hard Wired" */
        /* Write Logic (1) to the "Register Select" Pin to select the "Data Register"  */
		HAL_GPIO_WritePin((lcd->lcd_rs.port), (lcd->lcd_rs.pin), GPIO_PIN_SET);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4618      	mov	r0, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	2201      	movs	r2, #1
 80005a8:	4619      	mov	r1, r3
 80005aa:	f001 f943 	bl	8001834 <HAL_GPIO_WritePin>
        /* Send the Data through the (4-Pins" Data lines */
        lcd_send_4bits(lcd, data >> 4);
 80005ae:	78fb      	ldrb	r3, [r7, #3]
 80005b0:	091b      	lsrs	r3, r3, #4
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	4619      	mov	r1, r3
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	f000 f84c 	bl	8000654 <lcd_send_4bits>
        /* Send the Enable Signal on the "E" Pin */
        lcd_4bit_send_enable_signal(lcd);
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f000 f88d 	bl	80006dc <lcd_4bit_send_enable_signal>
        /* Send the Data through the (4-Pins" Data lines */
        lcd_send_4bits(lcd, data);
 80005c2:	78fb      	ldrb	r3, [r7, #3]
 80005c4:	4619      	mov	r1, r3
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f000 f844 	bl	8000654 <lcd_send_4bits>
        /* Send the Enable Signal on the "E" Pin */
        lcd_4bit_send_enable_signal(lcd);
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f000 f885 	bl	80006dc <lcd_4bit_send_enable_signal>

}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <lcd_4bit_send_char_data_pos>:
 * @param data
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
void lcd_4bit_send_char_data_pos(const lcd_4bit_t *lcd,uint8_t row, uint8_t column, uint8_t data){
 80005da:	b580      	push	{r7, lr}
 80005dc:	b082      	sub	sp, #8
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
 80005e2:	4608      	mov	r0, r1
 80005e4:	4611      	mov	r1, r2
 80005e6:	461a      	mov	r2, r3
 80005e8:	4603      	mov	r3, r0
 80005ea:	70fb      	strb	r3, [r7, #3]
 80005ec:	460b      	mov	r3, r1
 80005ee:	70bb      	strb	r3, [r7, #2]
 80005f0:	4613      	mov	r3, r2
 80005f2:	707b      	strb	r3, [r7, #1]

        lcd_4bit_set_cursor(lcd, row, column);
 80005f4:	78ba      	ldrb	r2, [r7, #2]
 80005f6:	78fb      	ldrb	r3, [r7, #3]
 80005f8:	4619      	mov	r1, r3
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f000 f88e 	bl	800071c <lcd_4bit_set_cursor>
        lcd_4bit_send_char_data(lcd, data);
 8000600:	787b      	ldrb	r3, [r7, #1]
 8000602:	4619      	mov	r1, r3
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f7ff ffc2 	bl	800058e <lcd_4bit_send_char_data>

}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <lcd_4bit_send_string_pos>:
 * @param str
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
void lcd_4bit_send_string_pos(const lcd_4bit_t *lcd, uint8_t row, uint8_t column, uint8_t *str){
 8000612:	b580      	push	{r7, lr}
 8000614:	b084      	sub	sp, #16
 8000616:	af00      	add	r7, sp, #0
 8000618:	60f8      	str	r0, [r7, #12]
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	72fb      	strb	r3, [r7, #11]
 8000620:	4613      	mov	r3, r2
 8000622:	72bb      	strb	r3, [r7, #10]

        lcd_4bit_set_cursor(lcd, row, column);
 8000624:	7aba      	ldrb	r2, [r7, #10]
 8000626:	7afb      	ldrb	r3, [r7, #11]
 8000628:	4619      	mov	r1, r3
 800062a:	68f8      	ldr	r0, [r7, #12]
 800062c:	f000 f876 	bl	800071c <lcd_4bit_set_cursor>
        while(*str){
 8000630:	e007      	b.n	8000642 <lcd_4bit_send_string_pos+0x30>
            lcd_4bit_send_char_data(lcd, *str++);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	1c5a      	adds	r2, r3, #1
 8000636:	607a      	str	r2, [r7, #4]
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	4619      	mov	r1, r3
 800063c:	68f8      	ldr	r0, [r7, #12]
 800063e:	f7ff ffa6 	bl	800058e <lcd_4bit_send_char_data>
        while(*str){
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d1f3      	bne.n	8000632 <lcd_4bit_send_string_pos+0x20>
        }

}
 800064a:	bf00      	nop
 800064c:	bf00      	nop
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <lcd_send_4bits>:
 * @param _data_command
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
static void lcd_send_4bits(const lcd_4bit_t *lcd, uint8_t _data_command){
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	460b      	mov	r3, r1
 800065e:	70fb      	strb	r3, [r7, #3]
	
	HAL_GPIO_WritePin((lcd->lcd_data[0].port), (lcd->lcd_data[0].pin), ((_data_command >> 0) & (uint8_t)0x01));
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	691b      	ldr	r3, [r3, #16]
 8000664:	4618      	mov	r0, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	b299      	uxth	r1, r3
 800066c:	78fb      	ldrb	r3, [r7, #3]
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	b2db      	uxtb	r3, r3
 8000674:	461a      	mov	r2, r3
 8000676:	f001 f8dd 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin((lcd->lcd_data[1].port), (lcd->lcd_data[1].pin), ((_data_command >> 1) & (uint8_t)0x01));
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	4618      	mov	r0, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	69db      	ldr	r3, [r3, #28]
 8000684:	b299      	uxth	r1, r3
 8000686:	78fb      	ldrb	r3, [r7, #3]
 8000688:	085b      	lsrs	r3, r3, #1
 800068a:	b2db      	uxtb	r3, r3
 800068c:	f003 0301 	and.w	r3, r3, #1
 8000690:	b2db      	uxtb	r3, r3
 8000692:	461a      	mov	r2, r3
 8000694:	f001 f8ce 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin((lcd->lcd_data[2].port), (lcd->lcd_data[2].pin), ((_data_command >> 2) & (uint8_t)0x01));
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	6a1b      	ldr	r3, [r3, #32]
 800069c:	4618      	mov	r0, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	b299      	uxth	r1, r3
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	089b      	lsrs	r3, r3, #2
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	461a      	mov	r2, r3
 80006b2:	f001 f8bf 	bl	8001834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin((lcd->lcd_data[3].port), (lcd->lcd_data[3].pin), ((_data_command >> 3) & (uint8_t)0x01));
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006ba:	4618      	mov	r0, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006c0:	b299      	uxth	r1, r3
 80006c2:	78fb      	ldrb	r3, [r7, #3]
 80006c4:	08db      	lsrs	r3, r3, #3
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	f003 0301 	and.w	r3, r3, #1
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	461a      	mov	r2, r3
 80006d0:	f001 f8b0 	bl	8001834 <HAL_GPIO_WritePin>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <lcd_4bit_send_enable_signal>:
 * @param lcd
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
static void lcd_4bit_send_enable_signal(const lcd_4bit_t *lcd){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((lcd->lcd_en.port), (lcd->lcd_en.pin), GPIO_PIN_SET);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	689b      	ldr	r3, [r3, #8]
 80006e8:	4618      	mov	r0, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	68db      	ldr	r3, [r3, #12]
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	2201      	movs	r2, #1
 80006f2:	4619      	mov	r1, r3
 80006f4:	f001 f89e 	bl	8001834 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80006f8:	2005      	movs	r0, #5
 80006fa:	f000 fdc9 	bl	8001290 <HAL_Delay>
	HAL_GPIO_WritePin((lcd->lcd_en.port), (lcd->lcd_en.pin), GPIO_PIN_RESET);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	689b      	ldr	r3, [r3, #8]
 8000702:	4618      	mov	r0, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	b29b      	uxth	r3, r3
 800070a:	2200      	movs	r2, #0
 800070c:	4619      	mov	r1, r3
 800070e:	f001 f891 	bl	8001834 <HAL_GPIO_WritePin>

}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
	...

0800071c <lcd_4bit_set_cursor>:
 * @param coulmn
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
static void lcd_4bit_set_cursor(const lcd_4bit_t *lcd, uint8_t row, uint8_t coulmn){
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	460b      	mov	r3, r1
 8000726:	70fb      	strb	r3, [r7, #3]
 8000728:	4613      	mov	r3, r2
 800072a:	70bb      	strb	r3, [r7, #2]
    coulmn--;
 800072c:	78bb      	ldrb	r3, [r7, #2]
 800072e:	3b01      	subs	r3, #1
 8000730:	70bb      	strb	r3, [r7, #2]
    switch(row){
 8000732:	78fb      	ldrb	r3, [r7, #3]
 8000734:	3b01      	subs	r3, #1
 8000736:	2b03      	cmp	r3, #3
 8000738:	d82a      	bhi.n	8000790 <lcd_4bit_set_cursor+0x74>
 800073a:	a201      	add	r2, pc, #4	; (adr r2, 8000740 <lcd_4bit_set_cursor+0x24>)
 800073c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000740:	08000751 	.word	0x08000751
 8000744:	08000761 	.word	0x08000761
 8000748:	08000771 	.word	0x08000771
 800074c:	08000781 	.word	0x08000781
        case ROW1 : lcd_4bit_send_command(lcd, (0x80 + coulmn)); break;
 8000750:	78bb      	ldrb	r3, [r7, #2]
 8000752:	3b80      	subs	r3, #128	; 0x80
 8000754:	b2db      	uxtb	r3, r3
 8000756:	4619      	mov	r1, r3
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f7ff fef2 	bl	8000542 <lcd_4bit_send_command>
 800075e:	e017      	b.n	8000790 <lcd_4bit_set_cursor+0x74>
        case ROW2 : lcd_4bit_send_command(lcd, (0xc0 + coulmn)); break;
 8000760:	78bb      	ldrb	r3, [r7, #2]
 8000762:	3b40      	subs	r3, #64	; 0x40
 8000764:	b2db      	uxtb	r3, r3
 8000766:	4619      	mov	r1, r3
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f7ff feea 	bl	8000542 <lcd_4bit_send_command>
 800076e:	e00f      	b.n	8000790 <lcd_4bit_set_cursor+0x74>
        case ROW3 : lcd_4bit_send_command(lcd, (0x94 + coulmn)); break;
 8000770:	78bb      	ldrb	r3, [r7, #2]
 8000772:	3b6c      	subs	r3, #108	; 0x6c
 8000774:	b2db      	uxtb	r3, r3
 8000776:	4619      	mov	r1, r3
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f7ff fee2 	bl	8000542 <lcd_4bit_send_command>
 800077e:	e007      	b.n	8000790 <lcd_4bit_set_cursor+0x74>
        case ROW4 : lcd_4bit_send_command(lcd, (0xd4 + coulmn)); break;
 8000780:	78bb      	ldrb	r3, [r7, #2]
 8000782:	3b2c      	subs	r3, #44	; 0x2c
 8000784:	b2db      	uxtb	r3, r3
 8000786:	4619      	mov	r1, r3
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff feda 	bl	8000542 <lcd_4bit_send_command>
 800078e:	bf00      	nop
        default : ;
    }
}
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b40      	ldr	r3, [pc, #256]	; (80008b4 <MX_GPIO_Init+0x11c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a3f      	ldr	r2, [pc, #252]	; (80008b4 <MX_GPIO_Init+0x11c>)
 80007b8:	f043 0310 	orr.w	r3, r3, #16
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b3d      	ldr	r3, [pc, #244]	; (80008b4 <MX_GPIO_Init+0x11c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0310 	and.w	r3, r3, #16
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b39      	ldr	r3, [pc, #228]	; (80008b4 <MX_GPIO_Init+0x11c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a38      	ldr	r2, [pc, #224]	; (80008b4 <MX_GPIO_Init+0x11c>)
 80007d4:	f043 0308 	orr.w	r3, r3, #8
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b36      	ldr	r3, [pc, #216]	; (80008b4 <MX_GPIO_Init+0x11c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0308 	and.w	r3, r3, #8
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	4b32      	ldr	r3, [pc, #200]	; (80008b4 <MX_GPIO_Init+0x11c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a31      	ldr	r2, [pc, #196]	; (80008b4 <MX_GPIO_Init+0x11c>)
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b2f      	ldr	r3, [pc, #188]	; (80008b4 <MX_GPIO_Init+0x11c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0304 	and.w	r3, r3, #4
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	21c3      	movs	r1, #195	; 0xc3
 8000806:	482c      	ldr	r0, [pc, #176]	; (80008b8 <MX_GPIO_Init+0x120>)
 8000808:	f001 f814 	bl	8001834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_4
 800080c:	2200      	movs	r2, #0
 800080e:	f240 61ff 	movw	r1, #1791	; 0x6ff
 8000812:	482a      	ldr	r0, [pc, #168]	; (80008bc <MX_GPIO_Init+0x124>)
 8000814:	f001 f80e 	bl	8001834 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0
                          |GPIO_PIN_10|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	2104      	movs	r1, #4
 800081c:	4828      	ldr	r0, [pc, #160]	; (80008c0 <MX_GPIO_Init+0x128>)
 800081e:	f001 f809 	bl	8001834 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 PE2 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_5;
 8000822:	233c      	movs	r3, #60	; 0x3c
 8000824:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	4619      	mov	r1, r3
 8000834:	4820      	ldr	r0, [pc, #128]	; (80008b8 <MX_GPIO_Init+0x120>)
 8000836:	f000 fe61 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE1 PE0 PE6 PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 800083a:	23c3      	movs	r3, #195	; 0xc3
 800083c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	4619      	mov	r1, r3
 8000850:	4819      	ldr	r0, [pc, #100]	; (80008b8 <MX_GPIO_Init+0x120>)
 8000852:	f000 fe53 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD5 PD6 PD4
                           PD3 PD1 PD2 PD0
                           PD10 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_4
 8000856:	f240 63ff 	movw	r3, #1791	; 0x6ff
 800085a:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0
                          |GPIO_PIN_10|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	4619      	mov	r1, r3
 800086e:	4813      	ldr	r0, [pc, #76]	; (80008bc <MX_GPIO_Init+0x124>)
 8000870:	f000 fe44 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD12 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_11;
 8000874:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000878:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	4619      	mov	r1, r3
 8000888:	480c      	ldr	r0, [pc, #48]	; (80008bc <MX_GPIO_Init+0x124>)
 800088a:	f000 fe37 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800088e:	2304      	movs	r3, #4
 8000890:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800089e:	f107 030c 	add.w	r3, r7, #12
 80008a2:	4619      	mov	r1, r3
 80008a4:	4806      	ldr	r0, [pc, #24]	; (80008c0 <MX_GPIO_Init+0x128>)
 80008a6:	f000 fe29 	bl	80014fc <HAL_GPIO_Init>

}
 80008aa:	bf00      	nop
 80008ac:	3720      	adds	r7, #32
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40021000 	.word	0x40021000
 80008bc:	40020c00 	.word	0x40020c00
 80008c0:	40020800 	.word	0x40020800

080008c4 <keypad_initialize>:
                                              {'1','2','3','-'},
                                              {'#','0','=','+'}
};


void keypad_initialize (const keypad_t *keypad){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	uint8_t row = 0, columns =0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	73fb      	strb	r3, [r7, #15]
 80008d0:	2300      	movs	r3, #0
 80008d2:	73bb      	strb	r3, [r7, #14]

        for (row = 0; row < KEYPAD_ROW; row++){
 80008d4:	2300      	movs	r3, #0
 80008d6:	73fb      	strb	r3, [r7, #15]
 80008d8:	e011      	b.n	80008fe <keypad_initialize+0x3a>
            HAL_GPIO_WritePin((keypad->keypad_row[row].port), (keypad->keypad_row[row].pin), GPIO_PIN_RESET);
 80008da:	7bfa      	ldrb	r2, [r7, #15]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80008e2:	4618      	mov	r0, r3
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	00db      	lsls	r3, r3, #3
 80008ea:	4413      	add	r3, r2
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	2200      	movs	r2, #0
 80008f2:	4619      	mov	r1, r3
 80008f4:	f000 ff9e 	bl	8001834 <HAL_GPIO_WritePin>
        for (row = 0; row < KEYPAD_ROW; row++){
 80008f8:	7bfb      	ldrb	r3, [r7, #15]
 80008fa:	3301      	adds	r3, #1
 80008fc:	73fb      	strb	r3, [r7, #15]
 80008fe:	7bfb      	ldrb	r3, [r7, #15]
 8000900:	2b03      	cmp	r3, #3
 8000902:	d9ea      	bls.n	80008da <keypad_initialize+0x16>
        }
}
 8000904:	bf00      	nop
 8000906:	bf00      	nop
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <keypad_read>:
void keypad_read (const keypad_t *keypad , uint8_t *key){
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
    logic_t key_c = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	733b      	strb	r3, [r7, #12]
    uint8_t rows_counter = 0 ,columns_counter = 0,counter = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	73fb      	strb	r3, [r7, #15]
 8000922:	2300      	movs	r3, #0
 8000924:	73bb      	strb	r3, [r7, #14]
 8000926:	2300      	movs	r3, #0
 8000928:	737b      	strb	r3, [r7, #13]

        for (rows_counter = 0; rows_counter < KEYPAD_ROW; rows_counter++){
 800092a:	2300      	movs	r3, #0
 800092c:	73fb      	strb	r3, [r7, #15]
 800092e:	e053      	b.n	80009d8 <keypad_read+0xc8>
            for (counter = 0; counter < KEYPAD_ROW; counter++){
 8000930:	2300      	movs	r3, #0
 8000932:	737b      	strb	r3, [r7, #13]
 8000934:	e011      	b.n	800095a <keypad_read+0x4a>
            	HAL_GPIO_WritePin((keypad->keypad_row[counter].port), (keypad->keypad_row[counter].pin), GPIO_PIN_RESET);
 8000936:	7b7a      	ldrb	r2, [r7, #13]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800093e:	4618      	mov	r0, r3
 8000940:	7b7b      	ldrb	r3, [r7, #13]
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	00db      	lsls	r3, r3, #3
 8000946:	4413      	add	r3, r2
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	b29b      	uxth	r3, r3
 800094c:	2200      	movs	r2, #0
 800094e:	4619      	mov	r1, r3
 8000950:	f000 ff70 	bl	8001834 <HAL_GPIO_WritePin>
            for (counter = 0; counter < KEYPAD_ROW; counter++){
 8000954:	7b7b      	ldrb	r3, [r7, #13]
 8000956:	3301      	adds	r3, #1
 8000958:	737b      	strb	r3, [r7, #13]
 800095a:	7b7b      	ldrb	r3, [r7, #13]
 800095c:	2b03      	cmp	r3, #3
 800095e:	d9ea      	bls.n	8000936 <keypad_read+0x26>
            }
            HAL_GPIO_WritePin((keypad->keypad_row[rows_counter].port), (keypad->keypad_row[rows_counter].pin), GPIO_PIN_SET);
 8000960:	7bfa      	ldrb	r2, [r7, #15]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000968:	4618      	mov	r0, r3
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	00db      	lsls	r3, r3, #3
 8000970:	4413      	add	r3, r2
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	b29b      	uxth	r3, r3
 8000976:	2201      	movs	r2, #1
 8000978:	4619      	mov	r1, r3
 800097a:	f000 ff5b 	bl	8001834 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 800097e:	200a      	movs	r0, #10
 8000980:	f000 fc86 	bl	8001290 <HAL_Delay>
            for (columns_counter = 0; columns_counter < KEYPAD_COL; columns_counter++){
 8000984:	2300      	movs	r3, #0
 8000986:	73bb      	strb	r3, [r7, #14]
 8000988:	e020      	b.n	80009cc <keypad_read+0xbc>
            	key_c = HAL_GPIO_ReadPin((keypad->keypad_col[columns_counter].port), (keypad->keypad_col[columns_counter].pin));
 800098a:	7bba      	ldrb	r2, [r7, #14]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3204      	adds	r2, #4
 8000990:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000994:	4618      	mov	r0, r3
 8000996:	7bbb      	ldrb	r3, [r7, #14]
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	3304      	adds	r3, #4
 800099c:	00db      	lsls	r3, r3, #3
 800099e:	4413      	add	r3, r2
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	4619      	mov	r1, r3
 80009a6:	f000 ff2d 	bl	8001804 <HAL_GPIO_ReadPin>
 80009aa:	4603      	mov	r3, r0
 80009ac:	733b      	strb	r3, [r7, #12]
                if (HIGH == key_c){
 80009ae:	7b3b      	ldrb	r3, [r7, #12]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d108      	bne.n	80009c6 <keypad_read+0xb6>
                    *key =  keypad_value[rows_counter][columns_counter]; 
 80009b4:	7bfa      	ldrb	r2, [r7, #15]
 80009b6:	7bbb      	ldrb	r3, [r7, #14]
 80009b8:	490b      	ldr	r1, [pc, #44]	; (80009e8 <keypad_read+0xd8>)
 80009ba:	0092      	lsls	r2, r2, #2
 80009bc:	440a      	add	r2, r1
 80009be:	4413      	add	r3, r2
 80009c0:	781a      	ldrb	r2, [r3, #0]
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	701a      	strb	r2, [r3, #0]
            for (columns_counter = 0; columns_counter < KEYPAD_COL; columns_counter++){
 80009c6:	7bbb      	ldrb	r3, [r7, #14]
 80009c8:	3301      	adds	r3, #1
 80009ca:	73bb      	strb	r3, [r7, #14]
 80009cc:	7bbb      	ldrb	r3, [r7, #14]
 80009ce:	2b03      	cmp	r3, #3
 80009d0:	d9db      	bls.n	800098a <keypad_read+0x7a>
        for (rows_counter = 0; rows_counter < KEYPAD_ROW; rows_counter++){
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	3301      	adds	r3, #1
 80009d6:	73fb      	strb	r3, [r7, #15]
 80009d8:	7bfb      	ldrb	r3, [r7, #15]
 80009da:	2b03      	cmp	r3, #3
 80009dc:	d9a8      	bls.n	8000930 <keypad_read+0x20>
                }
            }
        }

}
 80009de:	bf00      	nop
 80009e0:	bf00      	nop
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	08002628 	.word	0x08002628

080009ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f0:	f000 fbdc 	bl	80011ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f4:	f000 f884 	bl	8000b00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f8:	f7ff fece 	bl	8000798 <MX_GPIO_Init>
  MX_TIM10_Init();
 80009fc:	f000 fb60 	bl	80010c0 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim10);
 8000a00:	4833      	ldr	r0, [pc, #204]	; (8000ad0 <main+0xe4>)
 8000a02:	f001 fba5 	bl	8002150 <HAL_TIM_Base_Start_IT>

  initialization();
 8000a06:	f000 fa79 	bl	8000efc <initialization>

  lcd_4bit_send_string_pos(&lcd, 2, 8, "00:00");
 8000a0a:	4b32      	ldr	r3, [pc, #200]	; (8000ad4 <main+0xe8>)
 8000a0c:	2208      	movs	r2, #8
 8000a0e:	2102      	movs	r1, #2
 8000a10:	4831      	ldr	r0, [pc, #196]	; (8000ad8 <main+0xec>)
 8000a12:	f7ff fdfe 	bl	8000612 <lcd_4bit_send_string_pos>
  /* USER CODE END 2 */

  /* Infinite loop */
  while(1){
  /* USER CODE BEGIN WHILE */
	  Button_State();
 8000a16:	f000 f8d3 	bl	8000bc0 <Button_State>
	  Timer_ISR();
 8000a1a:	f000 f97b 	bl	8000d14 <Timer_ISR>
		  /* Check if door is closed */
		  if (Door == HIGH){
 8000a1e:	4b2f      	ldr	r3, [pc, #188]	; (8000adc <main+0xf0>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d104      	bne.n	8000a30 <main+0x44>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8000a26:	2201      	movs	r2, #1
 8000a28:	2102      	movs	r1, #2
 8000a2a:	482d      	ldr	r0, [pc, #180]	; (8000ae0 <main+0xf4>)
 8000a2c:	f000 ff02 	bl	8001834 <HAL_GPIO_WritePin>
		  }
		  if (Door == LOW && Start_Flag == CLEAR){
 8000a30:	4b2a      	ldr	r3, [pc, #168]	; (8000adc <main+0xf0>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d108      	bne.n	8000a4a <main+0x5e>
 8000a38:	4b2a      	ldr	r3, [pc, #168]	; (8000ae4 <main+0xf8>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d104      	bne.n	8000a4a <main+0x5e>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2102      	movs	r1, #2
 8000a44:	4826      	ldr	r0, [pc, #152]	; (8000ae0 <main+0xf4>)
 8000a46:	f000 fef5 	bl	8001834 <HAL_GPIO_WritePin>
		  }
		  /* Check if food is in microwave and door is closed */
		 if(Food_in == HIGH && Door == LOW)
 8000a4a:	4b27      	ldr	r3, [pc, #156]	; (8000ae8 <main+0xfc>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d112      	bne.n	8000a78 <main+0x8c>
 8000a52:	4b22      	ldr	r3, [pc, #136]	; (8000adc <main+0xf0>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d10e      	bne.n	8000a78 <main+0x8c>
		 {
		 	 /* We want to set time only once */
		 	 Set_Time();
 8000a5a:	f000 f8fd 	bl	8000c58 <Set_Time>

			   /* Check the state of the start button */
			 if(Start_Flag == SET && Pause_Flage == CLEAR)
 8000a5e:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <main+0xf8>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d108      	bne.n	8000a78 <main+0x8c>
 8000a66:	4b21      	ldr	r3, [pc, #132]	; (8000aec <main+0x100>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d104      	bne.n	8000a78 <main+0x8c>
			 {
				 /* Turn on the microwave, heater, and lamb */
				 Start_Microwave();
 8000a6e:	f000 f9f5 	bl	8000e5c <Start_Microwave>
				 Cancel_Flage = CLEAR;
 8000a72:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <main+0x104>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
			 }
		  }

	          /* Check the state of the Stop button */
	  	 if(Pause_Flage == SET)
 8000a78:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <main+0x100>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d107      	bne.n	8000a90 <main+0xa4>
	  	 {
	              Start_Flag = CLEAR;
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <main+0xf8>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	701a      	strb	r2, [r3, #0]
	              Pause_Flage = CLEAR;
 8000a86:	4b19      	ldr	r3, [pc, #100]	; (8000aec <main+0x100>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]
	              Stop_Microwave(); // stope the operation
 8000a8c:	f000 fa06 	bl	8000e9c <Stop_Microwave>
	  	 }
	         /* if the stop button is pressed twice, restart the program  */
	     if (Cancel_Flage == CANCEL){
 8000a90:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <main+0x104>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d1be      	bne.n	8000a16 <main+0x2a>
	              Stop_Microwave();
 8000a98:	f000 fa00 	bl	8000e9c <Stop_Microwave>
	              lcd_4bit_send_string_pos(&lcd, 2, 8, "00:00");
 8000a9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <main+0xe8>)
 8000a9e:	2208      	movs	r2, #8
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <main+0xec>)
 8000aa4:	f7ff fdb5 	bl	8000612 <lcd_4bit_send_string_pos>
	              Pause_Flage = CLEAR;
 8000aa8:	4b10      	ldr	r3, [pc, #64]	; (8000aec <main+0x100>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
	              Start_Flag = CLEAR;
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <main+0xf8>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	701a      	strb	r2, [r3, #0]
	              Time_minutes = CLEAR;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <main+0x108>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	701a      	strb	r2, [r3, #0]
	              Time_seconds = 60;
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <main+0x10c>)
 8000abc:	223c      	movs	r2, #60	; 0x3c
 8000abe:	701a      	strb	r2, [r3, #0]
	              Cancel_Flage = CLEAR;
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <main+0x104>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
	              Time_check = CLEAR;
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <main+0x110>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]
	  Button_State();
 8000acc:	e7a3      	b.n	8000a16 <main+0x2a>
 8000ace:	bf00      	nop
 8000ad0:	200000ac 	.word	0x200000ac
 8000ad4:	08002620 	.word	0x08002620
 8000ad8:	2000003c 	.word	0x2000003c
 8000adc:	2000002c 	.word	0x2000002c
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	2000002f 	.word	0x2000002f
 8000ae8:	2000002d 	.word	0x2000002d
 8000aec:	20000031 	.word	0x20000031
 8000af0:	20000032 	.word	0x20000032
 8000af4:	20000033 	.word	0x20000033
 8000af8:	20000000 	.word	0x20000000
 8000afc:	20000035 	.word	0x20000035

08000b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b094      	sub	sp, #80	; 0x50
 8000b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b06:	f107 0320 	add.w	r3, r7, #32
 8000b0a:	2230      	movs	r2, #48	; 0x30
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f001 fd72 	bl	80025f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b24:	2300      	movs	r3, #0
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	4b23      	ldr	r3, [pc, #140]	; (8000bb8 <SystemClock_Config+0xb8>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	4a22      	ldr	r2, [pc, #136]	; (8000bb8 <SystemClock_Config+0xb8>)
 8000b2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b32:	6413      	str	r3, [r2, #64]	; 0x40
 8000b34:	4b20      	ldr	r3, [pc, #128]	; (8000bb8 <SystemClock_Config+0xb8>)
 8000b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b40:	2300      	movs	r3, #0
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	4b1d      	ldr	r3, [pc, #116]	; (8000bbc <SystemClock_Config+0xbc>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b4c:	4a1b      	ldr	r2, [pc, #108]	; (8000bbc <SystemClock_Config+0xbc>)
 8000b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b52:	6013      	str	r3, [r2, #0]
 8000b54:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <SystemClock_Config+0xbc>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b60:	2302      	movs	r3, #2
 8000b62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b64:	2301      	movs	r3, #1
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b68:	2310      	movs	r3, #16
 8000b6a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b70:	f107 0320 	add.w	r3, r7, #32
 8000b74:	4618      	mov	r0, r3
 8000b76:	f000 fe77 	bl	8001868 <HAL_RCC_OscConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000b80:	f000 fa26 	bl	8000fd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b84:	230f      	movs	r3, #15
 8000b86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b98:	f107 030c 	add.w	r3, r7, #12
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f001 f8da 	bl	8001d58 <HAL_RCC_ClockConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000baa:	f000 fa11 	bl	8000fd0 <Error_Handler>
  }
}
 8000bae:	bf00      	nop
 8000bb0:	3750      	adds	r7, #80	; 0x50
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40007000 	.word	0x40007000

08000bc0 <Button_State>:

/* USER CODE BEGIN 4 */

void Button_State(){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
    /* Check if there is food in the microwave */
    Food_in = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5);
 8000bc4:	2120      	movs	r1, #32
 8000bc6:	481c      	ldr	r0, [pc, #112]	; (8000c38 <Button_State+0x78>)
 8000bc8:	f000 fe1c 	bl	8001804 <HAL_GPIO_ReadPin>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	461a      	mov	r2, r3
 8000bd0:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <Button_State+0x7c>)
 8000bd2:	701a      	strb	r2, [r3, #0]
    /* Check the status of the door */
    Door = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4);
 8000bd4:	2110      	movs	r1, #16
 8000bd6:	4818      	ldr	r0, [pc, #96]	; (8000c38 <Button_State+0x78>)
 8000bd8:	f000 fe14 	bl	8001804 <HAL_GPIO_ReadPin>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	461a      	mov	r2, r3
 8000be0:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <Button_State+0x80>)
 8000be2:	701a      	strb	r2, [r3, #0]
    Start = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2);
 8000be4:	2104      	movs	r1, #4
 8000be6:	4814      	ldr	r0, [pc, #80]	; (8000c38 <Button_State+0x78>)
 8000be8:	f000 fe0c 	bl	8001804 <HAL_GPIO_ReadPin>
 8000bec:	4603      	mov	r3, r0
 8000bee:	461a      	mov	r2, r3
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <Button_State+0x84>)
 8000bf2:	701a      	strb	r2, [r3, #0]
    /* Check the status of the Start */
    if (Start == GPIO_PIN_SET){
 8000bf4:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <Button_State+0x84>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d102      	bne.n	8000c02 <Button_State+0x42>
        Start_Flag = SET;
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <Button_State+0x88>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]
    }
    /* Check the status of the Stop */
    Stop = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3);
 8000c02:	2108      	movs	r1, #8
 8000c04:	480c      	ldr	r0, [pc, #48]	; (8000c38 <Button_State+0x78>)
 8000c06:	f000 fdfd 	bl	8001804 <HAL_GPIO_ReadPin>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <Button_State+0x8c>)
 8000c10:	701a      	strb	r2, [r3, #0]
    if(Stop == GPIO_PIN_SET){
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <Button_State+0x8c>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d10b      	bne.n	8000c32 <Button_State+0x72>

        Pause_Flage++;
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <Button_State+0x90>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <Button_State+0x90>)
 8000c24:	701a      	strb	r2, [r3, #0]
        Cancel_Flage++;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <Button_State+0x94>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <Button_State+0x94>)
 8000c30:	701a      	strb	r2, [r3, #0]
    }
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	2000002d 	.word	0x2000002d
 8000c40:	2000002c 	.word	0x2000002c
 8000c44:	2000002e 	.word	0x2000002e
 8000c48:	2000002f 	.word	0x2000002f
 8000c4c:	20000030 	.word	0x20000030
 8000c50:	20000031 	.word	0x20000031
 8000c54:	20000032 	.word	0x20000032

08000c58 <Set_Time>:
/**
 * @brief To Set the time from (0 to 99)
 * @param void
 * @return void
 */
void Set_Time(){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
    if(Time_check != 2){
 8000c5c:	4b28      	ldr	r3, [pc, #160]	; (8000d00 <Set_Time+0xa8>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d04b      	beq.n	8000cfc <Set_Time+0xa4>
    /* get input key from keypad */
    keypad_value = Keypad_Read_Value();
 8000c64:	f000 f93a 	bl	8000edc <Keypad_Read_Value>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <Set_Time+0xac>)
 8000c6e:	701a      	strb	r2, [r3, #0]
    /* check if the input is correct */
        if(('0' <= keypad_value) && ('9' >= keypad_value))
 8000c70:	4b24      	ldr	r3, [pc, #144]	; (8000d04 <Set_Time+0xac>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b2f      	cmp	r3, #47	; 0x2f
 8000c76:	d941      	bls.n	8000cfc <Set_Time+0xa4>
 8000c78:	4b22      	ldr	r3, [pc, #136]	; (8000d04 <Set_Time+0xac>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b39      	cmp	r3, #57	; 0x39
 8000c7e:	d83d      	bhi.n	8000cfc <Set_Time+0xa4>
        {
            if (keypad_value != 0){
 8000c80:	4b20      	ldr	r3, [pc, #128]	; (8000d04 <Set_Time+0xac>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d039      	beq.n	8000cfc <Set_Time+0xa4>
            /* Store the time */
            Time_minutes = (Time_minutes * 10) + (keypad_value - '0');
 8000c88:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <Set_Time+0xb0>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	0092      	lsls	r2, r2, #2
 8000c90:	4413      	add	r3, r2
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <Set_Time+0xac>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	3b30      	subs	r3, #48	; 0x30
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <Set_Time+0xb0>)
 8000ca4:	701a      	strb	r2, [r3, #0]

            /* display time*/
            if (Time_minutes <= 9){
 8000ca6:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <Set_Time+0xb0>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b09      	cmp	r3, #9
 8000cac:	d80b      	bhi.n	8000cc6 <Set_Time+0x6e>
                char_temp = keypad_value;
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <Set_Time+0xac>)
 8000cb0:	781a      	ldrb	r2, [r3, #0]
 8000cb2:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <Set_Time+0xb4>)
 8000cb4:	701a      	strb	r2, [r3, #0]
                lcd_4bit_send_char_data_pos(&lcd, 2, 9, char_temp);
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <Set_Time+0xb4>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2209      	movs	r2, #9
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	4814      	ldr	r0, [pc, #80]	; (8000d10 <Set_Time+0xb8>)
 8000cc0:	f7ff fc8b 	bl	80005da <lcd_4bit_send_char_data_pos>
 8000cc4:	e011      	b.n	8000cea <Set_Time+0x92>
            }
            else if(Time_minutes >= 10){
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <Set_Time+0xb0>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b09      	cmp	r3, #9
 8000ccc:	d90d      	bls.n	8000cea <Set_Time+0x92>
                lcd_4bit_send_char_data_pos(&lcd, 2, 9, keypad_value);
 8000cce:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <Set_Time+0xac>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2209      	movs	r2, #9
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	480e      	ldr	r0, [pc, #56]	; (8000d10 <Set_Time+0xb8>)
 8000cd8:	f7ff fc7f 	bl	80005da <lcd_4bit_send_char_data_pos>
                lcd_4bit_send_char_data_pos(&lcd, 2, 8, char_temp);
 8000cdc:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <Set_Time+0xb4>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2208      	movs	r2, #8
 8000ce2:	2102      	movs	r1, #2
 8000ce4:	480a      	ldr	r0, [pc, #40]	; (8000d10 <Set_Time+0xb8>)
 8000ce6:	f7ff fc78 	bl	80005da <lcd_4bit_send_char_data_pos>
            }
            ++Time_check;
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <Set_Time+0xa8>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <Set_Time+0xa8>)
 8000cf4:	701a      	strb	r2, [r3, #0]
            keypad_value = 0;
 8000cf6:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <Set_Time+0xac>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
            }
        }
    }
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000035 	.word	0x20000035
 8000d04:	20000034 	.word	0x20000034
 8000d08:	20000033 	.word	0x20000033
 8000d0c:	20000038 	.word	0x20000038
 8000d10:	2000003c 	.word	0x2000003c

08000d14 <Timer_ISR>:
/**
 * @brief Configure the timer to interrupt every 1 sec
 * @param void
 * @return void
 */
void Timer_ISR(){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
/* If the Run_flag is 1, then the user has pressed the start button and there is food in the microwave */
    if(Run_flag == SET && Enable_ISR == SET){
 8000d18:	4b46      	ldr	r3, [pc, #280]	; (8000e34 <Timer_ISR+0x120>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	f040 8086 	bne.w	8000e2e <Timer_ISR+0x11a>
 8000d22:	4b45      	ldr	r3, [pc, #276]	; (8000e38 <Timer_ISR+0x124>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	f040 8081 	bne.w	8000e2e <Timer_ISR+0x11a>
        /* if (Time_minutes) valid then start count the time and display it*/
        if(Time_minutes){
 8000d2c:	4b43      	ldr	r3, [pc, #268]	; (8000e3c <Timer_ISR+0x128>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d06e      	beq.n	8000e12 <Timer_ISR+0xfe>
            Time_seconds--;
 8000d34:	4b42      	ldr	r3, [pc, #264]	; (8000e40 <Timer_ISR+0x12c>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	4b40      	ldr	r3, [pc, #256]	; (8000e40 <Timer_ISR+0x12c>)
 8000d3e:	701a      	strb	r2, [r3, #0]
            /* display the minutes */
            count_char = '0' + ((Time_minutes-1) / 10);
 8000d40:	4b3e      	ldr	r3, [pc, #248]	; (8000e3c <Timer_ISR+0x128>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	4a3f      	ldr	r2, [pc, #252]	; (8000e44 <Timer_ISR+0x130>)
 8000d48:	fb82 1203 	smull	r1, r2, r2, r3
 8000d4c:	1092      	asrs	r2, r2, #2
 8000d4e:	17db      	asrs	r3, r3, #31
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	3330      	adds	r3, #48	; 0x30
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	4b3b      	ldr	r3, [pc, #236]	; (8000e48 <Timer_ISR+0x134>)
 8000d5a:	701a      	strb	r2, [r3, #0]
            lcd_4bit_send_char_data_pos(&lcd, 2, 8, count_char);
 8000d5c:	4b3a      	ldr	r3, [pc, #232]	; (8000e48 <Timer_ISR+0x134>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2208      	movs	r2, #8
 8000d62:	2102      	movs	r1, #2
 8000d64:	4839      	ldr	r0, [pc, #228]	; (8000e4c <Timer_ISR+0x138>)
 8000d66:	f7ff fc38 	bl	80005da <lcd_4bit_send_char_data_pos>
            count_char = '0' + ((Time_minutes-1) % 10);
 8000d6a:	4b34      	ldr	r3, [pc, #208]	; (8000e3c <Timer_ISR+0x128>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	1e5a      	subs	r2, r3, #1
 8000d70:	4b34      	ldr	r3, [pc, #208]	; (8000e44 <Timer_ISR+0x130>)
 8000d72:	fb83 1302 	smull	r1, r3, r3, r2
 8000d76:	1099      	asrs	r1, r3, #2
 8000d78:	17d3      	asrs	r3, r2, #31
 8000d7a:	1ac9      	subs	r1, r1, r3
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	440b      	add	r3, r1
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	1ad1      	subs	r1, r2, r3
 8000d86:	b2cb      	uxtb	r3, r1
 8000d88:	3330      	adds	r3, #48	; 0x30
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	4b2e      	ldr	r3, [pc, #184]	; (8000e48 <Timer_ISR+0x134>)
 8000d8e:	701a      	strb	r2, [r3, #0]
            lcd_4bit_send_char_data_pos(&lcd, 2, 9, count_char);
 8000d90:	4b2d      	ldr	r3, [pc, #180]	; (8000e48 <Timer_ISR+0x134>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2209      	movs	r2, #9
 8000d96:	2102      	movs	r1, #2
 8000d98:	482c      	ldr	r0, [pc, #176]	; (8000e4c <Timer_ISR+0x138>)
 8000d9a:	f7ff fc1e 	bl	80005da <lcd_4bit_send_char_data_pos>

            /* display the seconds */
            count_char = '0' + (Time_seconds / 10);
 8000d9e:	4b28      	ldr	r3, [pc, #160]	; (8000e40 <Timer_ISR+0x12c>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	4a2b      	ldr	r2, [pc, #172]	; (8000e50 <Timer_ISR+0x13c>)
 8000da4:	fba2 2303 	umull	r2, r3, r2, r3
 8000da8:	08db      	lsrs	r3, r3, #3
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	3330      	adds	r3, #48	; 0x30
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	4b25      	ldr	r3, [pc, #148]	; (8000e48 <Timer_ISR+0x134>)
 8000db2:	701a      	strb	r2, [r3, #0]
            lcd_4bit_send_char_data_pos(&lcd, 2, 11, count_char);
 8000db4:	4b24      	ldr	r3, [pc, #144]	; (8000e48 <Timer_ISR+0x134>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	220b      	movs	r2, #11
 8000dba:	2102      	movs	r1, #2
 8000dbc:	4823      	ldr	r0, [pc, #140]	; (8000e4c <Timer_ISR+0x138>)
 8000dbe:	f7ff fc0c 	bl	80005da <lcd_4bit_send_char_data_pos>
            count_char = '0' + (Time_seconds % 10);
 8000dc2:	4b1f      	ldr	r3, [pc, #124]	; (8000e40 <Timer_ISR+0x12c>)
 8000dc4:	781a      	ldrb	r2, [r3, #0]
 8000dc6:	4b22      	ldr	r3, [pc, #136]	; (8000e50 <Timer_ISR+0x13c>)
 8000dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8000dcc:	08d9      	lsrs	r1, r3, #3
 8000dce:	460b      	mov	r3, r1
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	3330      	adds	r3, #48	; 0x30
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <Timer_ISR+0x134>)
 8000de0:	701a      	strb	r2, [r3, #0]
            lcd_4bit_send_char_data_pos(&lcd, 2, 12, count_char);
 8000de2:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <Timer_ISR+0x134>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	220c      	movs	r2, #12
 8000de8:	2102      	movs	r1, #2
 8000dea:	4818      	ldr	r0, [pc, #96]	; (8000e4c <Timer_ISR+0x138>)
 8000dec:	f7ff fbf5 	bl	80005da <lcd_4bit_send_char_data_pos>

            /* A minute has passed if the seconds are 0 */
            if (Time_seconds == 0){
 8000df0:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <Timer_ISR+0x12c>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d108      	bne.n	8000e0a <Timer_ISR+0xf6>
                Time_minutes--;
 8000df8:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <Timer_ISR+0x128>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <Timer_ISR+0x128>)
 8000e02:	701a      	strb	r2, [r3, #0]
                Time_seconds = 60;
 8000e04:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <Timer_ISR+0x12c>)
 8000e06:	223c      	movs	r2, #60	; 0x3c
 8000e08:	701a      	strb	r2, [r3, #0]
            }
            Enable_ISR = CLEAR;
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <Timer_ISR+0x124>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
            Start_Flag = CLEAR;
            Stop_Microwave();
            Enable_ISR = CLEAR;
        }
    }
}
 8000e10:	e00d      	b.n	8000e2e <Timer_ISR+0x11a>
            lcd_4bit_send_string_pos(&lcd, 2, 8, "00:00");
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <Timer_ISR+0x140>)
 8000e14:	2208      	movs	r2, #8
 8000e16:	2102      	movs	r1, #2
 8000e18:	480c      	ldr	r0, [pc, #48]	; (8000e4c <Timer_ISR+0x138>)
 8000e1a:	f7ff fbfa 	bl	8000612 <lcd_4bit_send_string_pos>
            Start_Flag = CLEAR;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <Timer_ISR+0x144>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
            Stop_Microwave();
 8000e24:	f000 f83a 	bl	8000e9c <Stop_Microwave>
            Enable_ISR = CLEAR;
 8000e28:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <Timer_ISR+0x124>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000036 	.word	0x20000036
 8000e38:	20000039 	.word	0x20000039
 8000e3c:	20000033 	.word	0x20000033
 8000e40:	20000000 	.word	0x20000000
 8000e44:	66666667 	.word	0x66666667
 8000e48:	20000037 	.word	0x20000037
 8000e4c:	2000003c 	.word	0x2000003c
 8000e50:	cccccccd 	.word	0xcccccccd
 8000e54:	08002620 	.word	0x08002620
 8000e58:	2000002f 	.word	0x2000002f

08000e5c <Start_Microwave>:
/**
 * @brief This function starts the microwave, lamp, and heater
 * @param void
 * @return void
 */
void Start_Microwave(){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
    /* start the heater */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_SET);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2101      	movs	r1, #1
 8000e64:	480b      	ldr	r0, [pc, #44]	; (8000e94 <Start_Microwave+0x38>)
 8000e66:	f000 fce5 	bl	8001834 <HAL_GPIO_WritePin>
    /* Turn on the lamb  */
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	2102      	movs	r1, #2
 8000e6e:	4809      	ldr	r0, [pc, #36]	; (8000e94 <Start_Microwave+0x38>)
 8000e70:	f000 fce0 	bl	8001834 <HAL_GPIO_WritePin>
    /* Start the microwave  */
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2140      	movs	r1, #64	; 0x40
 8000e78:	4806      	ldr	r0, [pc, #24]	; (8000e94 <Start_Microwave+0x38>)
 8000e7a:	f000 fcdb 	bl	8001834 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2180      	movs	r1, #128	; 0x80
 8000e82:	4804      	ldr	r0, [pc, #16]	; (8000e94 <Start_Microwave+0x38>)
 8000e84:	f000 fcd6 	bl	8001834 <HAL_GPIO_WritePin>
    /* Start the timer */
    Run_flag = 1;
 8000e88:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <Start_Microwave+0x3c>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	701a      	strb	r2, [r3, #0]
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40021000 	.word	0x40021000
 8000e98:	20000036 	.word	0x20000036

08000e9c <Stop_Microwave>:
/**
 * @brief This function stops the microwave, lamp, and heater
 * @param void
 * @return void
 */
void Stop_Microwave(){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
    /* Stop the heater */
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	480b      	ldr	r0, [pc, #44]	; (8000ed4 <Stop_Microwave+0x38>)
 8000ea6:	f000 fcc5 	bl	8001834 <HAL_GPIO_WritePin>
    /* Turn off the lamb  */
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2102      	movs	r1, #2
 8000eae:	4809      	ldr	r0, [pc, #36]	; (8000ed4 <Stop_Microwave+0x38>)
 8000eb0:	f000 fcc0 	bl	8001834 <HAL_GPIO_WritePin>
    /* Stop the microwave  */
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2140      	movs	r1, #64	; 0x40
 8000eb8:	4806      	ldr	r0, [pc, #24]	; (8000ed4 <Stop_Microwave+0x38>)
 8000eba:	f000 fcbb 	bl	8001834 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2180      	movs	r1, #128	; 0x80
 8000ec2:	4804      	ldr	r0, [pc, #16]	; (8000ed4 <Stop_Microwave+0x38>)
 8000ec4:	f000 fcb6 	bl	8001834 <HAL_GPIO_WritePin>
    /* Stop the timer */
    Run_flag = 0;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <Stop_Microwave+0x3c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	20000036 	.word	0x20000036

08000edc <Keypad_Read_Value>:
 * @brief This function reads the keypad
 * @param void
 * @return Keypad Value
 */
uint8_t Keypad_Read_Value()
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
    uint8_t Value;
    keypad_read(&keypad, &Value);
 8000ee2:	1dfb      	adds	r3, r7, #7
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <Keypad_Read_Value+0x1c>)
 8000ee8:	f7ff fd12 	bl	8000910 <keypad_read>
    return Value;
 8000eec:	79fb      	ldrb	r3, [r7, #7]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	2000006c 	.word	0x2000006c

08000efc <initialization>:
/**
 * @brief This function initializes the modules
 * @param void
 * @return void
 */
void initialization(){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
    lcd.lcd_rs.port = GPIOD,
 8000f00:	4b30      	ldr	r3, [pc, #192]	; (8000fc4 <initialization+0xc8>)
 8000f02:	4a31      	ldr	r2, [pc, #196]	; (8000fc8 <initialization+0xcc>)
 8000f04:	601a      	str	r2, [r3, #0]
    lcd.lcd_rs.pin = GPIO_PIN_0,
 8000f06:	4b2f      	ldr	r3, [pc, #188]	; (8000fc4 <initialization+0xc8>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	605a      	str	r2, [r3, #4]
    lcd.lcd_en.port = GPIOD,
 8000f0c:	4b2d      	ldr	r3, [pc, #180]	; (8000fc4 <initialization+0xc8>)
 8000f0e:	4a2e      	ldr	r2, [pc, #184]	; (8000fc8 <initialization+0xcc>)
 8000f10:	609a      	str	r2, [r3, #8]
    lcd.lcd_en.pin = GPIO_PIN_1,
 8000f12:	4b2c      	ldr	r3, [pc, #176]	; (8000fc4 <initialization+0xc8>)
 8000f14:	2202      	movs	r2, #2
 8000f16:	60da      	str	r2, [r3, #12]

    lcd.lcd_data[0].port = GPIOD,
 8000f18:	4b2a      	ldr	r3, [pc, #168]	; (8000fc4 <initialization+0xc8>)
 8000f1a:	4a2b      	ldr	r2, [pc, #172]	; (8000fc8 <initialization+0xcc>)
 8000f1c:	611a      	str	r2, [r3, #16]
    lcd.lcd_data[0].pin = GPIO_PIN_2,
 8000f1e:	4b29      	ldr	r3, [pc, #164]	; (8000fc4 <initialization+0xc8>)
 8000f20:	2204      	movs	r2, #4
 8000f22:	615a      	str	r2, [r3, #20]
    lcd.lcd_data[1].port = GPIOD,
 8000f24:	4b27      	ldr	r3, [pc, #156]	; (8000fc4 <initialization+0xc8>)
 8000f26:	4a28      	ldr	r2, [pc, #160]	; (8000fc8 <initialization+0xcc>)
 8000f28:	619a      	str	r2, [r3, #24]
    lcd.lcd_data[1].pin = GPIO_PIN_3,
 8000f2a:	4b26      	ldr	r3, [pc, #152]	; (8000fc4 <initialization+0xc8>)
 8000f2c:	2208      	movs	r2, #8
 8000f2e:	61da      	str	r2, [r3, #28]
    lcd.lcd_data[2].port = GPIOD,
 8000f30:	4b24      	ldr	r3, [pc, #144]	; (8000fc4 <initialization+0xc8>)
 8000f32:	4a25      	ldr	r2, [pc, #148]	; (8000fc8 <initialization+0xcc>)
 8000f34:	621a      	str	r2, [r3, #32]
    lcd.lcd_data[2].pin = GPIO_PIN_4,
 8000f36:	4b23      	ldr	r3, [pc, #140]	; (8000fc4 <initialization+0xc8>)
 8000f38:	2210      	movs	r2, #16
 8000f3a:	625a      	str	r2, [r3, #36]	; 0x24
    lcd.lcd_data[3].port = GPIOD,
 8000f3c:	4b21      	ldr	r3, [pc, #132]	; (8000fc4 <initialization+0xc8>)
 8000f3e:	4a22      	ldr	r2, [pc, #136]	; (8000fc8 <initialization+0xcc>)
 8000f40:	629a      	str	r2, [r3, #40]	; 0x28
    lcd.lcd_data[3].pin = GPIO_PIN_5;
 8000f42:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <initialization+0xc8>)
 8000f44:	2220      	movs	r2, #32
 8000f46:	62da      	str	r2, [r3, #44]	; 0x2c


	keypad.keypad_row[0].port = GPIOD,
 8000f48:	4b20      	ldr	r3, [pc, #128]	; (8000fcc <initialization+0xd0>)
 8000f4a:	4a1f      	ldr	r2, [pc, #124]	; (8000fc8 <initialization+0xcc>)
 8000f4c:	601a      	str	r2, [r3, #0]
	keypad.keypad_row[0].pin = GPIO_PIN_6,
 8000f4e:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <initialization+0xd0>)
 8000f50:	2240      	movs	r2, #64	; 0x40
 8000f52:	605a      	str	r2, [r3, #4]
	keypad.keypad_row[1].port = GPIOD,
 8000f54:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <initialization+0xd0>)
 8000f56:	4a1c      	ldr	r2, [pc, #112]	; (8000fc8 <initialization+0xcc>)
 8000f58:	609a      	str	r2, [r3, #8]
	keypad.keypad_row[1].pin = GPIO_PIN_7,
 8000f5a:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <initialization+0xd0>)
 8000f5c:	2280      	movs	r2, #128	; 0x80
 8000f5e:	60da      	str	r2, [r3, #12]
	keypad.keypad_row[2].port = GPIOD,
 8000f60:	4b1a      	ldr	r3, [pc, #104]	; (8000fcc <initialization+0xd0>)
 8000f62:	4a19      	ldr	r2, [pc, #100]	; (8000fc8 <initialization+0xcc>)
 8000f64:	611a      	str	r2, [r3, #16]
	keypad.keypad_row[2].pin = GPIO_PIN_9,
 8000f66:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <initialization+0xd0>)
 8000f68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f6c:	615a      	str	r2, [r3, #20]
	keypad.keypad_row[3].port = GPIOD,
 8000f6e:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <initialization+0xd0>)
 8000f70:	4a15      	ldr	r2, [pc, #84]	; (8000fc8 <initialization+0xcc>)
 8000f72:	619a      	str	r2, [r3, #24]
	keypad.keypad_row[3].pin = GPIO_PIN_10,
 8000f74:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <initialization+0xd0>)
 8000f76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f7a:	61da      	str	r2, [r3, #28]

	keypad.keypad_col[0].port = GPIOD,
 8000f7c:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <initialization+0xd0>)
 8000f7e:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <initialization+0xcc>)
 8000f80:	621a      	str	r2, [r3, #32]
	keypad.keypad_col[0].pin = GPIO_PIN_11,
 8000f82:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <initialization+0xd0>)
 8000f84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f88:	625a      	str	r2, [r3, #36]	; 0x24
	keypad.keypad_col[1].port = GPIOD,
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <initialization+0xd0>)
 8000f8c:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <initialization+0xcc>)
 8000f8e:	629a      	str	r2, [r3, #40]	; 0x28
	keypad.keypad_col[1].pin = GPIO_PIN_12,
 8000f90:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <initialization+0xd0>)
 8000f92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f96:	62da      	str	r2, [r3, #44]	; 0x2c
	keypad.keypad_col[2].port = GPIOD,
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <initialization+0xd0>)
 8000f9a:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <initialization+0xcc>)
 8000f9c:	631a      	str	r2, [r3, #48]	; 0x30
	keypad.keypad_col[2].pin = GPIO_PIN_13,
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <initialization+0xd0>)
 8000fa0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fa4:	635a      	str	r2, [r3, #52]	; 0x34
	keypad.keypad_col[3].port = GPIOD,
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <initialization+0xd0>)
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <initialization+0xcc>)
 8000faa:	639a      	str	r2, [r3, #56]	; 0x38
	keypad.keypad_col[3].pin = GPIO_PIN_14;
 8000fac:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <initialization+0xd0>)
 8000fae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fb2:	63da      	str	r2, [r3, #60]	; 0x3c

	lcd_4bit_intialize(&lcd);
 8000fb4:	4803      	ldr	r0, [pc, #12]	; (8000fc4 <initialization+0xc8>)
 8000fb6:	f7ff fa8f 	bl	80004d8 <lcd_4bit_intialize>
	keypad_initialize (&keypad);
 8000fba:	4804      	ldr	r0, [pc, #16]	; (8000fcc <initialization+0xd0>)
 8000fbc:	f7ff fc82 	bl	80008c4 <keypad_initialize>

}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	2000003c 	.word	0x2000003c
 8000fc8:	40020c00 	.word	0x40020c00
 8000fcc:	2000006c 	.word	0x2000006c

08000fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd4:	b672      	cpsid	i
}
 8000fd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <Error_Handler+0x8>
	...

08000fdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <HAL_MspInit+0x4c>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	4a0f      	ldr	r2, [pc, #60]	; (8001028 <HAL_MspInit+0x4c>)
 8000fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <HAL_MspInit+0x4c>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	603b      	str	r3, [r7, #0]
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <HAL_MspInit+0x4c>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	4a08      	ldr	r2, [pc, #32]	; (8001028 <HAL_MspInit+0x4c>)
 8001008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100c:	6413      	str	r3, [r2, #64]	; 0x40
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_MspInit+0x4c>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	40023800 	.word	0x40023800

0800102c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <NMI_Handler+0x4>

08001032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <HardFault_Handler+0x4>

08001038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <MemManage_Handler+0x4>

0800103e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001042:	e7fe      	b.n	8001042 <BusFault_Handler+0x4>

08001044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <UsageFault_Handler+0x4>

0800104a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001078:	f000 f8ea 	bl	8001250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}

08001080 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
	HAL_TIM_IRQHandler(&htim10);
 8001084:	4803      	ldr	r0, [pc, #12]	; (8001094 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001086:	f001 f8c5 	bl	8002214 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
	Enable_ISR = 1;
 800108a:	4b03      	ldr	r3, [pc, #12]	; (8001098 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800108c:	2201      	movs	r2, #1
 800108e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	200000ac 	.word	0x200000ac
 8001098:	20000039 	.word	0x20000039

0800109c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <SystemInit+0x20>)
 80010a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010a6:	4a05      	ldr	r2, [pc, #20]	; (80010bc <SystemInit+0x20>)
 80010a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80010c4:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <MX_TIM10_Init+0x40>)
 80010c6:	4a0f      	ldr	r2, [pc, #60]	; (8001104 <MX_TIM10_Init+0x44>)
 80010c8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 24;
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <MX_TIM10_Init+0x40>)
 80010cc:	2218      	movs	r2, #24
 80010ce:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d0:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <MX_TIM10_Init+0x40>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 63999;
 80010d6:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <MX_TIM10_Init+0x40>)
 80010d8:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80010dc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <MX_TIM10_Init+0x40>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <MX_TIM10_Init+0x40>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <MX_TIM10_Init+0x40>)
 80010ec:	f000 ffe0 	bl	80020b0 <HAL_TIM_Base_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80010f6:	f7ff ff6b 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200000ac 	.word	0x200000ac
 8001104:	40014400 	.word	0x40014400

08001108 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <HAL_TIM_Base_MspInit+0x48>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d115      	bne.n	8001146 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <HAL_TIM_Base_MspInit+0x4c>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	4a0c      	ldr	r2, [pc, #48]	; (8001154 <HAL_TIM_Base_MspInit+0x4c>)
 8001124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001128:	6453      	str	r3, [r2, #68]	; 0x44
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <HAL_TIM_Base_MspInit+0x4c>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	2019      	movs	r0, #25
 800113c:	f000 f9a7 	bl	800148e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001140:	2019      	movs	r0, #25
 8001142:	f000 f9c0 	bl	80014c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40014400 	.word	0x40014400
 8001154:	40023800 	.word	0x40023800

08001158 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001158:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001190 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800115c:	480d      	ldr	r0, [pc, #52]	; (8001194 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800115e:	490e      	ldr	r1, [pc, #56]	; (8001198 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001160:	4a0e      	ldr	r2, [pc, #56]	; (800119c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001164:	e002      	b.n	800116c <LoopCopyDataInit>

08001166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116a:	3304      	adds	r3, #4

0800116c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800116c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001170:	d3f9      	bcc.n	8001166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001172:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001174:	4c0b      	ldr	r4, [pc, #44]	; (80011a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001178:	e001      	b.n	800117e <LoopFillZerobss>

0800117a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800117c:	3204      	adds	r2, #4

0800117e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001180:	d3fb      	bcc.n	800117a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001182:	f7ff ff8b 	bl	800109c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001186:	f001 fa13 	bl	80025b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800118a:	f7ff fc2f 	bl	80009ec <main>
  bx  lr    
 800118e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001190:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001198:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800119c:	08002658 	.word	0x08002658
  ldr r2, =_sbss
 80011a0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80011a4:	200000f8 	.word	0x200000f8

080011a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a8:	e7fe      	b.n	80011a8 <ADC_IRQHandler>
	...

080011ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <HAL_Init+0x40>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a0d      	ldr	r2, [pc, #52]	; (80011ec <HAL_Init+0x40>)
 80011b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011bc:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <HAL_Init+0x40>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <HAL_Init+0x40>)
 80011c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <HAL_Init+0x40>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a07      	ldr	r2, [pc, #28]	; (80011ec <HAL_Init+0x40>)
 80011ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d4:	2003      	movs	r0, #3
 80011d6:	f000 f94f 	bl	8001478 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011da:	200f      	movs	r0, #15
 80011dc:	f000 f808 	bl	80011f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e0:	f7ff fefc 	bl	8000fdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023c00 	.word	0x40023c00

080011f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_InitTick+0x54>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_InitTick+0x58>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001206:	fbb3 f3f1 	udiv	r3, r3, r1
 800120a:	fbb2 f3f3 	udiv	r3, r2, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f000 f967 	bl	80014e2 <HAL_SYSTICK_Config>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e00e      	b.n	800123c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b0f      	cmp	r3, #15
 8001222:	d80a      	bhi.n	800123a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001224:	2200      	movs	r2, #0
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	f04f 30ff 	mov.w	r0, #4294967295
 800122c:	f000 f92f 	bl	800148e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001230:	4a06      	ldr	r2, [pc, #24]	; (800124c <HAL_InitTick+0x5c>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	e000      	b.n	800123c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000004 	.word	0x20000004
 8001248:	2000000c 	.word	0x2000000c
 800124c:	20000008 	.word	0x20000008

08001250 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_IncTick+0x20>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_IncTick+0x24>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4413      	add	r3, r2
 8001260:	4a04      	ldr	r2, [pc, #16]	; (8001274 <HAL_IncTick+0x24>)
 8001262:	6013      	str	r3, [r2, #0]
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	2000000c 	.word	0x2000000c
 8001274:	200000f4 	.word	0x200000f4

08001278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return uwTick;
 800127c:	4b03      	ldr	r3, [pc, #12]	; (800128c <HAL_GetTick+0x14>)
 800127e:	681b      	ldr	r3, [r3, #0]
}
 8001280:	4618      	mov	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	200000f4 	.word	0x200000f4

08001290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001298:	f7ff ffee 	bl	8001278 <HAL_GetTick>
 800129c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a8:	d005      	beq.n	80012b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_Delay+0x44>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012b6:	bf00      	nop
 80012b8:	f7ff ffde 	bl	8001278 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d8f7      	bhi.n	80012b8 <HAL_Delay+0x28>
  {
  }
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	2000000c 	.word	0x2000000c

080012d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f4:	4013      	ands	r3, r2
 80012f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130a:	4a04      	ldr	r2, [pc, #16]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	60d3      	str	r3, [r2, #12]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <__NVIC_GetPriorityGrouping+0x18>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	0a1b      	lsrs	r3, r3, #8
 800132a:	f003 0307 	and.w	r3, r3, #7
}
 800132e:	4618      	mov	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	2b00      	cmp	r3, #0
 800134c:	db0b      	blt.n	8001366 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	f003 021f 	and.w	r2, r3, #31
 8001354:	4907      	ldr	r1, [pc, #28]	; (8001374 <__NVIC_EnableIRQ+0x38>)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	095b      	lsrs	r3, r3, #5
 800135c:	2001      	movs	r0, #1
 800135e:	fa00 f202 	lsl.w	r2, r0, r2
 8001362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000e100 	.word	0xe000e100

08001378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	6039      	str	r1, [r7, #0]
 8001382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001388:	2b00      	cmp	r3, #0
 800138a:	db0a      	blt.n	80013a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	490c      	ldr	r1, [pc, #48]	; (80013c4 <__NVIC_SetPriority+0x4c>)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	0112      	lsls	r2, r2, #4
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	440b      	add	r3, r1
 800139c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a0:	e00a      	b.n	80013b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4908      	ldr	r1, [pc, #32]	; (80013c8 <__NVIC_SetPriority+0x50>)
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	3b04      	subs	r3, #4
 80013b0:	0112      	lsls	r2, r2, #4
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	440b      	add	r3, r1
 80013b6:	761a      	strb	r2, [r3, #24]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000e100 	.word	0xe000e100
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b089      	sub	sp, #36	; 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f1c3 0307 	rsb	r3, r3, #7
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	bf28      	it	cs
 80013ea:	2304      	movcs	r3, #4
 80013ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3304      	adds	r3, #4
 80013f2:	2b06      	cmp	r3, #6
 80013f4:	d902      	bls.n	80013fc <NVIC_EncodePriority+0x30>
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3b03      	subs	r3, #3
 80013fa:	e000      	b.n	80013fe <NVIC_EncodePriority+0x32>
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001400:	f04f 32ff 	mov.w	r2, #4294967295
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43da      	mvns	r2, r3
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	401a      	ands	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001414:	f04f 31ff 	mov.w	r1, #4294967295
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	fa01 f303 	lsl.w	r3, r1, r3
 800141e:	43d9      	mvns	r1, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	4313      	orrs	r3, r2
         );
}
 8001426:	4618      	mov	r0, r3
 8001428:	3724      	adds	r7, #36	; 0x24
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001444:	d301      	bcc.n	800144a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001446:	2301      	movs	r3, #1
 8001448:	e00f      	b.n	800146a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <SysTick_Config+0x40>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001452:	210f      	movs	r1, #15
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	f7ff ff8e 	bl	8001378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <SysTick_Config+0x40>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <SysTick_Config+0x40>)
 8001464:	2207      	movs	r2, #7
 8001466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	e000e010 	.word	0xe000e010

08001478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff ff29 	bl	80012d8 <__NVIC_SetPriorityGrouping>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800148e:	b580      	push	{r7, lr}
 8001490:	b086      	sub	sp, #24
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
 800149a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a0:	f7ff ff3e 	bl	8001320 <__NVIC_GetPriorityGrouping>
 80014a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	68b9      	ldr	r1, [r7, #8]
 80014aa:	6978      	ldr	r0, [r7, #20]
 80014ac:	f7ff ff8e 	bl	80013cc <NVIC_EncodePriority>
 80014b0:	4602      	mov	r2, r0
 80014b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b6:	4611      	mov	r1, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff5d 	bl	8001378 <__NVIC_SetPriority>
}
 80014be:	bf00      	nop
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff31 	bl	800133c <__NVIC_EnableIRQ>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ffa2 	bl	8001434 <SysTick_Config>
 80014f0:	4603      	mov	r3, r0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	; 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800150e:	2300      	movs	r3, #0
 8001510:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
 8001516:	e159      	b.n	80017cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001518:	2201      	movs	r2, #1
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	429a      	cmp	r2, r3
 8001532:	f040 8148 	bne.w	80017c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 0303 	and.w	r3, r3, #3
 800153e:	2b01      	cmp	r3, #1
 8001540:	d005      	beq.n	800154e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800154a:	2b02      	cmp	r3, #2
 800154c:	d130      	bne.n	80015b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	2203      	movs	r2, #3
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	68da      	ldr	r2, [r3, #12]
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001584:	2201      	movs	r2, #1
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	091b      	lsrs	r3, r3, #4
 800159a:	f003 0201 	and.w	r2, r3, #1
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	2b03      	cmp	r3, #3
 80015ba:	d017      	beq.n	80015ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	2203      	movs	r2, #3
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d123      	bne.n	8001640 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	08da      	lsrs	r2, r3, #3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3208      	adds	r2, #8
 8001600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001604:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	220f      	movs	r2, #15
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	691a      	ldr	r2, [r3, #16]
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	08da      	lsrs	r2, r3, #3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3208      	adds	r2, #8
 800163a:	69b9      	ldr	r1, [r7, #24]
 800163c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	2203      	movs	r2, #3
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 0203 	and.w	r2, r3, #3
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 80a2 	beq.w	80017c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	4b57      	ldr	r3, [pc, #348]	; (80017e4 <HAL_GPIO_Init+0x2e8>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	4a56      	ldr	r2, [pc, #344]	; (80017e4 <HAL_GPIO_Init+0x2e8>)
 800168c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001690:	6453      	str	r3, [r2, #68]	; 0x44
 8001692:	4b54      	ldr	r3, [pc, #336]	; (80017e4 <HAL_GPIO_Init+0x2e8>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800169e:	4a52      	ldr	r2, [pc, #328]	; (80017e8 <HAL_GPIO_Init+0x2ec>)
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	089b      	lsrs	r3, r3, #2
 80016a4:	3302      	adds	r3, #2
 80016a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	220f      	movs	r2, #15
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4013      	ands	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a49      	ldr	r2, [pc, #292]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d019      	beq.n	80016fe <HAL_GPIO_Init+0x202>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a48      	ldr	r2, [pc, #288]	; (80017f0 <HAL_GPIO_Init+0x2f4>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d013      	beq.n	80016fa <HAL_GPIO_Init+0x1fe>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a47      	ldr	r2, [pc, #284]	; (80017f4 <HAL_GPIO_Init+0x2f8>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d00d      	beq.n	80016f6 <HAL_GPIO_Init+0x1fa>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a46      	ldr	r2, [pc, #280]	; (80017f8 <HAL_GPIO_Init+0x2fc>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d007      	beq.n	80016f2 <HAL_GPIO_Init+0x1f6>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a45      	ldr	r2, [pc, #276]	; (80017fc <HAL_GPIO_Init+0x300>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d101      	bne.n	80016ee <HAL_GPIO_Init+0x1f2>
 80016ea:	2304      	movs	r3, #4
 80016ec:	e008      	b.n	8001700 <HAL_GPIO_Init+0x204>
 80016ee:	2307      	movs	r3, #7
 80016f0:	e006      	b.n	8001700 <HAL_GPIO_Init+0x204>
 80016f2:	2303      	movs	r3, #3
 80016f4:	e004      	b.n	8001700 <HAL_GPIO_Init+0x204>
 80016f6:	2302      	movs	r3, #2
 80016f8:	e002      	b.n	8001700 <HAL_GPIO_Init+0x204>
 80016fa:	2301      	movs	r3, #1
 80016fc:	e000      	b.n	8001700 <HAL_GPIO_Init+0x204>
 80016fe:	2300      	movs	r3, #0
 8001700:	69fa      	ldr	r2, [r7, #28]
 8001702:	f002 0203 	and.w	r2, r2, #3
 8001706:	0092      	lsls	r2, r2, #2
 8001708:	4093      	lsls	r3, r2
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4313      	orrs	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001710:	4935      	ldr	r1, [pc, #212]	; (80017e8 <HAL_GPIO_Init+0x2ec>)
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	089b      	lsrs	r3, r3, #2
 8001716:	3302      	adds	r3, #2
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800171e:	4b38      	ldr	r3, [pc, #224]	; (8001800 <HAL_GPIO_Init+0x304>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	43db      	mvns	r3, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4013      	ands	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	4313      	orrs	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001742:	4a2f      	ldr	r2, [pc, #188]	; (8001800 <HAL_GPIO_Init+0x304>)
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001748:	4b2d      	ldr	r3, [pc, #180]	; (8001800 <HAL_GPIO_Init+0x304>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d003      	beq.n	800176c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800176c:	4a24      	ldr	r2, [pc, #144]	; (8001800 <HAL_GPIO_Init+0x304>)
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001772:	4b23      	ldr	r3, [pc, #140]	; (8001800 <HAL_GPIO_Init+0x304>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	43db      	mvns	r3, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4013      	ands	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001796:	4a1a      	ldr	r2, [pc, #104]	; (8001800 <HAL_GPIO_Init+0x304>)
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800179c:	4b18      	ldr	r3, [pc, #96]	; (8001800 <HAL_GPIO_Init+0x304>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	43db      	mvns	r3, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017c0:	4a0f      	ldr	r2, [pc, #60]	; (8001800 <HAL_GPIO_Init+0x304>)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3301      	adds	r3, #1
 80017ca:	61fb      	str	r3, [r7, #28]
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	2b0f      	cmp	r3, #15
 80017d0:	f67f aea2 	bls.w	8001518 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017d4:	bf00      	nop
 80017d6:	bf00      	nop
 80017d8:	3724      	adds	r7, #36	; 0x24
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40013800 	.word	0x40013800
 80017ec:	40020000 	.word	0x40020000
 80017f0:	40020400 	.word	0x40020400
 80017f4:	40020800 	.word	0x40020800
 80017f8:	40020c00 	.word	0x40020c00
 80017fc:	40021000 	.word	0x40021000
 8001800:	40013c00 	.word	0x40013c00

08001804 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691a      	ldr	r2, [r3, #16]
 8001814:	887b      	ldrh	r3, [r7, #2]
 8001816:	4013      	ands	r3, r2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d002      	beq.n	8001822 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800181c:	2301      	movs	r3, #1
 800181e:	73fb      	strb	r3, [r7, #15]
 8001820:	e001      	b.n	8001826 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001822:	2300      	movs	r3, #0
 8001824:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001826:	7bfb      	ldrb	r3, [r7, #15]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	807b      	strh	r3, [r7, #2]
 8001840:	4613      	mov	r3, r2
 8001842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001844:	787b      	ldrb	r3, [r7, #1]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800184a:	887a      	ldrh	r2, [r7, #2]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001850:	e003      	b.n	800185a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001852:	887b      	ldrh	r3, [r7, #2]
 8001854:	041a      	lsls	r2, r3, #16
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	619a      	str	r2, [r3, #24]
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e267      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b00      	cmp	r3, #0
 8001884:	d075      	beq.n	8001972 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001886:	4b88      	ldr	r3, [pc, #544]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 030c 	and.w	r3, r3, #12
 800188e:	2b04      	cmp	r3, #4
 8001890:	d00c      	beq.n	80018ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001892:	4b85      	ldr	r3, [pc, #532]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800189a:	2b08      	cmp	r3, #8
 800189c:	d112      	bne.n	80018c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800189e:	4b82      	ldr	r3, [pc, #520]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018aa:	d10b      	bne.n	80018c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ac:	4b7e      	ldr	r3, [pc, #504]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d05b      	beq.n	8001970 <HAL_RCC_OscConfig+0x108>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d157      	bne.n	8001970 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e242      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018cc:	d106      	bne.n	80018dc <HAL_RCC_OscConfig+0x74>
 80018ce:	4b76      	ldr	r3, [pc, #472]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a75      	ldr	r2, [pc, #468]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	e01d      	b.n	8001918 <HAL_RCC_OscConfig+0xb0>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018e4:	d10c      	bne.n	8001900 <HAL_RCC_OscConfig+0x98>
 80018e6:	4b70      	ldr	r3, [pc, #448]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a6f      	ldr	r2, [pc, #444]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	4b6d      	ldr	r3, [pc, #436]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a6c      	ldr	r2, [pc, #432]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	e00b      	b.n	8001918 <HAL_RCC_OscConfig+0xb0>
 8001900:	4b69      	ldr	r3, [pc, #420]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a68      	ldr	r2, [pc, #416]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	4b66      	ldr	r3, [pc, #408]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a65      	ldr	r2, [pc, #404]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d013      	beq.n	8001948 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7ff fcaa 	bl	8001278 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001928:	f7ff fca6 	bl	8001278 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b64      	cmp	r3, #100	; 0x64
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e207      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193a:	4b5b      	ldr	r3, [pc, #364]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f0      	beq.n	8001928 <HAL_RCC_OscConfig+0xc0>
 8001946:	e014      	b.n	8001972 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001948:	f7ff fc96 	bl	8001278 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001950:	f7ff fc92 	bl	8001278 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b64      	cmp	r3, #100	; 0x64
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e1f3      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001962:	4b51      	ldr	r3, [pc, #324]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0xe8>
 800196e:	e000      	b.n	8001972 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d063      	beq.n	8001a46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800197e:	4b4a      	ldr	r3, [pc, #296]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 030c 	and.w	r3, r3, #12
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00b      	beq.n	80019a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800198a:	4b47      	ldr	r3, [pc, #284]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001992:	2b08      	cmp	r3, #8
 8001994:	d11c      	bne.n	80019d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001996:	4b44      	ldr	r3, [pc, #272]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d116      	bne.n	80019d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a2:	4b41      	ldr	r3, [pc, #260]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d005      	beq.n	80019ba <HAL_RCC_OscConfig+0x152>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d001      	beq.n	80019ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e1c7      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ba:	4b3b      	ldr	r3, [pc, #236]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	4937      	ldr	r1, [pc, #220]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ce:	e03a      	b.n	8001a46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d020      	beq.n	8001a1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019d8:	4b34      	ldr	r3, [pc, #208]	; (8001aac <HAL_RCC_OscConfig+0x244>)
 80019da:	2201      	movs	r2, #1
 80019dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019de:	f7ff fc4b 	bl	8001278 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019e6:	f7ff fc47 	bl	8001278 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e1a8      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f8:	4b2b      	ldr	r3, [pc, #172]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0f0      	beq.n	80019e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a04:	4b28      	ldr	r3, [pc, #160]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	4925      	ldr	r1, [pc, #148]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	600b      	str	r3, [r1, #0]
 8001a18:	e015      	b.n	8001a46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a1a:	4b24      	ldr	r3, [pc, #144]	; (8001aac <HAL_RCC_OscConfig+0x244>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a20:	f7ff fc2a 	bl	8001278 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a28:	f7ff fc26 	bl	8001278 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e187      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a3a:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f0      	bne.n	8001a28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d036      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d016      	beq.n	8001a88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <HAL_RCC_OscConfig+0x248>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a60:	f7ff fc0a 	bl	8001278 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a68:	f7ff fc06 	bl	8001278 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e167      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f0      	beq.n	8001a68 <HAL_RCC_OscConfig+0x200>
 8001a86:	e01b      	b.n	8001ac0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <HAL_RCC_OscConfig+0x248>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8e:	f7ff fbf3 	bl	8001278 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a94:	e00e      	b.n	8001ab4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a96:	f7ff fbef 	bl	8001278 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d907      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e150      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	42470000 	.word	0x42470000
 8001ab0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab4:	4b88      	ldr	r3, [pc, #544]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1ea      	bne.n	8001a96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 8097 	beq.w	8001bfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ad2:	4b81      	ldr	r3, [pc, #516]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10f      	bne.n	8001afe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	4b7d      	ldr	r3, [pc, #500]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	4a7c      	ldr	r2, [pc, #496]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aec:	6413      	str	r3, [r2, #64]	; 0x40
 8001aee:	4b7a      	ldr	r3, [pc, #488]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	60bb      	str	r3, [r7, #8]
 8001af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001afa:	2301      	movs	r3, #1
 8001afc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afe:	4b77      	ldr	r3, [pc, #476]	; (8001cdc <HAL_RCC_OscConfig+0x474>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d118      	bne.n	8001b3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b0a:	4b74      	ldr	r3, [pc, #464]	; (8001cdc <HAL_RCC_OscConfig+0x474>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a73      	ldr	r2, [pc, #460]	; (8001cdc <HAL_RCC_OscConfig+0x474>)
 8001b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b16:	f7ff fbaf 	bl	8001278 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b1e:	f7ff fbab 	bl	8001278 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e10c      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b30:	4b6a      	ldr	r3, [pc, #424]	; (8001cdc <HAL_RCC_OscConfig+0x474>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d106      	bne.n	8001b52 <HAL_RCC_OscConfig+0x2ea>
 8001b44:	4b64      	ldr	r3, [pc, #400]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b48:	4a63      	ldr	r2, [pc, #396]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b50:	e01c      	b.n	8001b8c <HAL_RCC_OscConfig+0x324>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2b05      	cmp	r3, #5
 8001b58:	d10c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x30c>
 8001b5a:	4b5f      	ldr	r3, [pc, #380]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5e:	4a5e      	ldr	r2, [pc, #376]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b60:	f043 0304 	orr.w	r3, r3, #4
 8001b64:	6713      	str	r3, [r2, #112]	; 0x70
 8001b66:	4b5c      	ldr	r3, [pc, #368]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6a:	4a5b      	ldr	r2, [pc, #364]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6713      	str	r3, [r2, #112]	; 0x70
 8001b72:	e00b      	b.n	8001b8c <HAL_RCC_OscConfig+0x324>
 8001b74:	4b58      	ldr	r3, [pc, #352]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b78:	4a57      	ldr	r2, [pc, #348]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b7a:	f023 0301 	bic.w	r3, r3, #1
 8001b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b80:	4b55      	ldr	r3, [pc, #340]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b84:	4a54      	ldr	r2, [pc, #336]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b86:	f023 0304 	bic.w	r3, r3, #4
 8001b8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d015      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b94:	f7ff fb70 	bl	8001278 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b9a:	e00a      	b.n	8001bb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b9c:	f7ff fb6c 	bl	8001278 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e0cb      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb2:	4b49      	ldr	r3, [pc, #292]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0ee      	beq.n	8001b9c <HAL_RCC_OscConfig+0x334>
 8001bbe:	e014      	b.n	8001bea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc0:	f7ff fb5a 	bl	8001278 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc6:	e00a      	b.n	8001bde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc8:	f7ff fb56 	bl	8001278 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e0b5      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bde:	4b3e      	ldr	r3, [pc, #248]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1ee      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bea:	7dfb      	ldrb	r3, [r7, #23]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d105      	bne.n	8001bfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf0:	4b39      	ldr	r3, [pc, #228]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	4a38      	ldr	r2, [pc, #224]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 80a1 	beq.w	8001d48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c06:	4b34      	ldr	r3, [pc, #208]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d05c      	beq.n	8001ccc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d141      	bne.n	8001c9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1a:	4b31      	ldr	r3, [pc, #196]	; (8001ce0 <HAL_RCC_OscConfig+0x478>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7ff fb2a 	bl	8001278 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c28:	f7ff fb26 	bl	8001278 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e087      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c3a:	4b27      	ldr	r3, [pc, #156]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69da      	ldr	r2, [r3, #28]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	019b      	lsls	r3, r3, #6
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5c:	085b      	lsrs	r3, r3, #1
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	041b      	lsls	r3, r3, #16
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c68:	061b      	lsls	r3, r3, #24
 8001c6a:	491b      	ldr	r1, [pc, #108]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c70:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <HAL_RCC_OscConfig+0x478>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c76:	f7ff faff 	bl	8001278 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7e:	f7ff fafb 	bl	8001278 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e05c      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0f0      	beq.n	8001c7e <HAL_RCC_OscConfig+0x416>
 8001c9c:	e054      	b.n	8001d48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9e:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <HAL_RCC_OscConfig+0x478>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fae8 	bl	8001278 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cac:	f7ff fae4 	bl	8001278 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e045      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x444>
 8001cca:	e03d      	b.n	8001d48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d107      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e038      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40007000 	.word	0x40007000
 8001ce0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ce4:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <HAL_RCC_OscConfig+0x4ec>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d028      	beq.n	8001d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d121      	bne.n	8001d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d11a      	bne.n	8001d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d14:	4013      	ands	r3, r2
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d111      	bne.n	8001d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2a:	085b      	lsrs	r3, r3, #1
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d107      	bne.n	8001d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e000      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40023800 	.word	0x40023800

08001d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0cc      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d6c:	4b68      	ldr	r3, [pc, #416]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d90c      	bls.n	8001d94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7a:	4b65      	ldr	r3, [pc, #404]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d82:	4b63      	ldr	r3, [pc, #396]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d001      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0b8      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d020      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dac:	4b59      	ldr	r3, [pc, #356]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	4a58      	ldr	r2, [pc, #352]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001db2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001db6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d005      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dc4:	4b53      	ldr	r3, [pc, #332]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	4a52      	ldr	r2, [pc, #328]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd0:	4b50      	ldr	r3, [pc, #320]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	494d      	ldr	r1, [pc, #308]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d044      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d107      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df6:	4b47      	ldr	r3, [pc, #284]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d119      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e07f      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d003      	beq.n	8001e16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d107      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e16:	4b3f      	ldr	r3, [pc, #252]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d109      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e06f      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e26:	4b3b      	ldr	r3, [pc, #236]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e067      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e36:	4b37      	ldr	r3, [pc, #220]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f023 0203 	bic.w	r2, r3, #3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	4934      	ldr	r1, [pc, #208]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e48:	f7ff fa16 	bl	8001278 <HAL_GetTick>
 8001e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4e:	e00a      	b.n	8001e66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e50:	f7ff fa12 	bl	8001278 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e04f      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e66:	4b2b      	ldr	r3, [pc, #172]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 020c 	and.w	r2, r3, #12
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d1eb      	bne.n	8001e50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e78:	4b25      	ldr	r3, [pc, #148]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d20c      	bcs.n	8001ea0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e86:	4b22      	ldr	r3, [pc, #136]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8e:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e032      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d008      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eac:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	4916      	ldr	r1, [pc, #88]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d009      	beq.n	8001ede <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eca:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	490e      	ldr	r1, [pc, #56]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ede:	f000 f821 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	091b      	lsrs	r3, r3, #4
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	490a      	ldr	r1, [pc, #40]	; (8001f18 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef0:	5ccb      	ldrb	r3, [r1, r3]
 8001ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef6:	4a09      	ldr	r2, [pc, #36]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_RCC_ClockConfig+0x1c8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff f976 	bl	80011f0 <HAL_InitTick>

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40023c00 	.word	0x40023c00
 8001f14:	40023800 	.word	0x40023800
 8001f18:	08002638 	.word	0x08002638
 8001f1c:	20000004 	.word	0x20000004
 8001f20:	20000008 	.word	0x20000008

08001f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f28:	b090      	sub	sp, #64	; 0x40
 8001f2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	637b      	str	r3, [r7, #52]	; 0x34
 8001f30:	2300      	movs	r3, #0
 8001f32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f34:	2300      	movs	r3, #0
 8001f36:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f3c:	4b59      	ldr	r3, [pc, #356]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 030c 	and.w	r3, r3, #12
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d00d      	beq.n	8001f64 <HAL_RCC_GetSysClockFreq+0x40>
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	f200 80a1 	bhi.w	8002090 <HAL_RCC_GetSysClockFreq+0x16c>
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <HAL_RCC_GetSysClockFreq+0x34>
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d003      	beq.n	8001f5e <HAL_RCC_GetSysClockFreq+0x3a>
 8001f56:	e09b      	b.n	8002090 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f58:	4b53      	ldr	r3, [pc, #332]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f5a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001f5c:	e09b      	b.n	8002096 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f5e:	4b53      	ldr	r3, [pc, #332]	; (80020ac <HAL_RCC_GetSysClockFreq+0x188>)
 8001f60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f62:	e098      	b.n	8002096 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f64:	4b4f      	ldr	r3, [pc, #316]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f6c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f6e:	4b4d      	ldr	r3, [pc, #308]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d028      	beq.n	8001fcc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f7a:	4b4a      	ldr	r3, [pc, #296]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	099b      	lsrs	r3, r3, #6
 8001f80:	2200      	movs	r2, #0
 8001f82:	623b      	str	r3, [r7, #32]
 8001f84:	627a      	str	r2, [r7, #36]	; 0x24
 8001f86:	6a3b      	ldr	r3, [r7, #32]
 8001f88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4b47      	ldr	r3, [pc, #284]	; (80020ac <HAL_RCC_GetSysClockFreq+0x188>)
 8001f90:	fb03 f201 	mul.w	r2, r3, r1
 8001f94:	2300      	movs	r3, #0
 8001f96:	fb00 f303 	mul.w	r3, r0, r3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	4a43      	ldr	r2, [pc, #268]	; (80020ac <HAL_RCC_GetSysClockFreq+0x188>)
 8001f9e:	fba0 1202 	umull	r1, r2, r0, r2
 8001fa2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fa4:	460a      	mov	r2, r1
 8001fa6:	62ba      	str	r2, [r7, #40]	; 0x28
 8001fa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001faa:	4413      	add	r3, r2
 8001fac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	61bb      	str	r3, [r7, #24]
 8001fb4:	61fa      	str	r2, [r7, #28]
 8001fb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001fbe:	f7fe f909 	bl	80001d4 <__aeabi_uldivmod>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fca:	e053      	b.n	8002074 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fcc:	4b35      	ldr	r3, [pc, #212]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	099b      	lsrs	r3, r3, #6
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	617a      	str	r2, [r7, #20]
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001fde:	f04f 0b00 	mov.w	fp, #0
 8001fe2:	4652      	mov	r2, sl
 8001fe4:	465b      	mov	r3, fp
 8001fe6:	f04f 0000 	mov.w	r0, #0
 8001fea:	f04f 0100 	mov.w	r1, #0
 8001fee:	0159      	lsls	r1, r3, #5
 8001ff0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ff4:	0150      	lsls	r0, r2, #5
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	ebb2 080a 	subs.w	r8, r2, sl
 8001ffe:	eb63 090b 	sbc.w	r9, r3, fp
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	f04f 0300 	mov.w	r3, #0
 800200a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800200e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002012:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002016:	ebb2 0408 	subs.w	r4, r2, r8
 800201a:	eb63 0509 	sbc.w	r5, r3, r9
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	f04f 0300 	mov.w	r3, #0
 8002026:	00eb      	lsls	r3, r5, #3
 8002028:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800202c:	00e2      	lsls	r2, r4, #3
 800202e:	4614      	mov	r4, r2
 8002030:	461d      	mov	r5, r3
 8002032:	eb14 030a 	adds.w	r3, r4, sl
 8002036:	603b      	str	r3, [r7, #0]
 8002038:	eb45 030b 	adc.w	r3, r5, fp
 800203c:	607b      	str	r3, [r7, #4]
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	e9d7 4500 	ldrd	r4, r5, [r7]
 800204a:	4629      	mov	r1, r5
 800204c:	028b      	lsls	r3, r1, #10
 800204e:	4621      	mov	r1, r4
 8002050:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002054:	4621      	mov	r1, r4
 8002056:	028a      	lsls	r2, r1, #10
 8002058:	4610      	mov	r0, r2
 800205a:	4619      	mov	r1, r3
 800205c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800205e:	2200      	movs	r2, #0
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	60fa      	str	r2, [r7, #12]
 8002064:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002068:	f7fe f8b4 	bl	80001d4 <__aeabi_uldivmod>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4613      	mov	r3, r2
 8002072:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002074:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	0c1b      	lsrs	r3, r3, #16
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	3301      	adds	r3, #1
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002084:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002088:	fbb2 f3f3 	udiv	r3, r2, r3
 800208c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800208e:	e002      	b.n	8002096 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002090:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002092:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002094:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002098:	4618      	mov	r0, r3
 800209a:	3740      	adds	r7, #64	; 0x40
 800209c:	46bd      	mov	sp, r7
 800209e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020a2:	bf00      	nop
 80020a4:	40023800 	.word	0x40023800
 80020a8:	00f42400 	.word	0x00f42400
 80020ac:	017d7840 	.word	0x017d7840

080020b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e041      	b.n	8002146 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d106      	bne.n	80020dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7ff f816 	bl	8001108 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2202      	movs	r2, #2
 80020e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3304      	adds	r3, #4
 80020ec:	4619      	mov	r1, r3
 80020ee:	4610      	mov	r0, r2
 80020f0:	f000 f9ca 	bl	8002488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b01      	cmp	r3, #1
 8002162:	d001      	beq.n	8002168 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e044      	b.n	80021f2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2202      	movs	r2, #2
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 0201 	orr.w	r2, r2, #1
 800217e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a1e      	ldr	r2, [pc, #120]	; (8002200 <HAL_TIM_Base_Start_IT+0xb0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d018      	beq.n	80021bc <HAL_TIM_Base_Start_IT+0x6c>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002192:	d013      	beq.n	80021bc <HAL_TIM_Base_Start_IT+0x6c>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a1a      	ldr	r2, [pc, #104]	; (8002204 <HAL_TIM_Base_Start_IT+0xb4>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d00e      	beq.n	80021bc <HAL_TIM_Base_Start_IT+0x6c>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a19      	ldr	r2, [pc, #100]	; (8002208 <HAL_TIM_Base_Start_IT+0xb8>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d009      	beq.n	80021bc <HAL_TIM_Base_Start_IT+0x6c>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a17      	ldr	r2, [pc, #92]	; (800220c <HAL_TIM_Base_Start_IT+0xbc>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d004      	beq.n	80021bc <HAL_TIM_Base_Start_IT+0x6c>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a16      	ldr	r2, [pc, #88]	; (8002210 <HAL_TIM_Base_Start_IT+0xc0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d111      	bne.n	80021e0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2b06      	cmp	r3, #6
 80021cc:	d010      	beq.n	80021f0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f042 0201 	orr.w	r2, r2, #1
 80021dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021de:	e007      	b.n	80021f0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0201 	orr.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40010000 	.word	0x40010000
 8002204:	40000400 	.word	0x40000400
 8002208:	40000800 	.word	0x40000800
 800220c:	40000c00 	.word	0x40000c00
 8002210:	40014000 	.word	0x40014000

08002214 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b02      	cmp	r3, #2
 8002228:	d122      	bne.n	8002270 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b02      	cmp	r3, #2
 8002236:	d11b      	bne.n	8002270 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f06f 0202 	mvn.w	r2, #2
 8002240:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f8f8 	bl	800244c <HAL_TIM_IC_CaptureCallback>
 800225c:	e005      	b.n	800226a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f8ea 	bl	8002438 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 f8fb 	bl	8002460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	f003 0304 	and.w	r3, r3, #4
 800227a:	2b04      	cmp	r3, #4
 800227c:	d122      	bne.n	80022c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b04      	cmp	r3, #4
 800228a:	d11b      	bne.n	80022c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f06f 0204 	mvn.w	r2, #4
 8002294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2202      	movs	r2, #2
 800229a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f8ce 	bl	800244c <HAL_TIM_IC_CaptureCallback>
 80022b0:	e005      	b.n	80022be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f8c0 	bl	8002438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 f8d1 	bl	8002460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b08      	cmp	r3, #8
 80022d0:	d122      	bne.n	8002318 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d11b      	bne.n	8002318 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f06f 0208 	mvn.w	r2, #8
 80022e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2204      	movs	r2, #4
 80022ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f8a4 	bl	800244c <HAL_TIM_IC_CaptureCallback>
 8002304:	e005      	b.n	8002312 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f896 	bl	8002438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 f8a7 	bl	8002460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	f003 0310 	and.w	r3, r3, #16
 8002322:	2b10      	cmp	r3, #16
 8002324:	d122      	bne.n	800236c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f003 0310 	and.w	r3, r3, #16
 8002330:	2b10      	cmp	r3, #16
 8002332:	d11b      	bne.n	800236c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f06f 0210 	mvn.w	r2, #16
 800233c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2208      	movs	r2, #8
 8002342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f87a 	bl	800244c <HAL_TIM_IC_CaptureCallback>
 8002358:	e005      	b.n	8002366 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f86c 	bl	8002438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 f87d 	bl	8002460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b01      	cmp	r3, #1
 8002378:	d10e      	bne.n	8002398 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b01      	cmp	r3, #1
 8002386:	d107      	bne.n	8002398 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f06f 0201 	mvn.w	r2, #1
 8002390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f846 	bl	8002424 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a2:	2b80      	cmp	r3, #128	; 0x80
 80023a4:	d10e      	bne.n	80023c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b0:	2b80      	cmp	r3, #128	; 0x80
 80023b2:	d107      	bne.n	80023c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f8ec 	bl	800259c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ce:	2b40      	cmp	r3, #64	; 0x40
 80023d0:	d10e      	bne.n	80023f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023dc:	2b40      	cmp	r3, #64	; 0x40
 80023de:	d107      	bne.n	80023f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f842 	bl	8002474 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	f003 0320 	and.w	r3, r3, #32
 80023fa:	2b20      	cmp	r3, #32
 80023fc:	d10e      	bne.n	800241c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f003 0320 	and.w	r3, r3, #32
 8002408:	2b20      	cmp	r3, #32
 800240a:	d107      	bne.n	800241c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f06f 0220 	mvn.w	r2, #32
 8002414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f8b6 	bl	8002588 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800241c:	bf00      	nop
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a34      	ldr	r2, [pc, #208]	; (800256c <TIM_Base_SetConfig+0xe4>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d00f      	beq.n	80024c0 <TIM_Base_SetConfig+0x38>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a6:	d00b      	beq.n	80024c0 <TIM_Base_SetConfig+0x38>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a31      	ldr	r2, [pc, #196]	; (8002570 <TIM_Base_SetConfig+0xe8>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d007      	beq.n	80024c0 <TIM_Base_SetConfig+0x38>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a30      	ldr	r2, [pc, #192]	; (8002574 <TIM_Base_SetConfig+0xec>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d003      	beq.n	80024c0 <TIM_Base_SetConfig+0x38>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a2f      	ldr	r2, [pc, #188]	; (8002578 <TIM_Base_SetConfig+0xf0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d108      	bne.n	80024d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a25      	ldr	r2, [pc, #148]	; (800256c <TIM_Base_SetConfig+0xe4>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d01b      	beq.n	8002512 <TIM_Base_SetConfig+0x8a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e0:	d017      	beq.n	8002512 <TIM_Base_SetConfig+0x8a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a22      	ldr	r2, [pc, #136]	; (8002570 <TIM_Base_SetConfig+0xe8>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d013      	beq.n	8002512 <TIM_Base_SetConfig+0x8a>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a21      	ldr	r2, [pc, #132]	; (8002574 <TIM_Base_SetConfig+0xec>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d00f      	beq.n	8002512 <TIM_Base_SetConfig+0x8a>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a20      	ldr	r2, [pc, #128]	; (8002578 <TIM_Base_SetConfig+0xf0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d00b      	beq.n	8002512 <TIM_Base_SetConfig+0x8a>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a1f      	ldr	r2, [pc, #124]	; (800257c <TIM_Base_SetConfig+0xf4>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d007      	beq.n	8002512 <TIM_Base_SetConfig+0x8a>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a1e      	ldr	r2, [pc, #120]	; (8002580 <TIM_Base_SetConfig+0xf8>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d003      	beq.n	8002512 <TIM_Base_SetConfig+0x8a>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a1d      	ldr	r2, [pc, #116]	; (8002584 <TIM_Base_SetConfig+0xfc>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d108      	bne.n	8002524 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002518:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4313      	orrs	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	4313      	orrs	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a08      	ldr	r2, [pc, #32]	; (800256c <TIM_Base_SetConfig+0xe4>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d103      	bne.n	8002558 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	691a      	ldr	r2, [r3, #16]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	615a      	str	r2, [r3, #20]
}
 800255e:	bf00      	nop
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	40010000 	.word	0x40010000
 8002570:	40000400 	.word	0x40000400
 8002574:	40000800 	.word	0x40000800
 8002578:	40000c00 	.word	0x40000c00
 800257c:	40014000 	.word	0x40014000
 8002580:	40014400 	.word	0x40014400
 8002584:	40014800 	.word	0x40014800

08002588 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <__libc_init_array>:
 80025b0:	b570      	push	{r4, r5, r6, lr}
 80025b2:	4d0d      	ldr	r5, [pc, #52]	; (80025e8 <__libc_init_array+0x38>)
 80025b4:	4c0d      	ldr	r4, [pc, #52]	; (80025ec <__libc_init_array+0x3c>)
 80025b6:	1b64      	subs	r4, r4, r5
 80025b8:	10a4      	asrs	r4, r4, #2
 80025ba:	2600      	movs	r6, #0
 80025bc:	42a6      	cmp	r6, r4
 80025be:	d109      	bne.n	80025d4 <__libc_init_array+0x24>
 80025c0:	4d0b      	ldr	r5, [pc, #44]	; (80025f0 <__libc_init_array+0x40>)
 80025c2:	4c0c      	ldr	r4, [pc, #48]	; (80025f4 <__libc_init_array+0x44>)
 80025c4:	f000 f820 	bl	8002608 <_init>
 80025c8:	1b64      	subs	r4, r4, r5
 80025ca:	10a4      	asrs	r4, r4, #2
 80025cc:	2600      	movs	r6, #0
 80025ce:	42a6      	cmp	r6, r4
 80025d0:	d105      	bne.n	80025de <__libc_init_array+0x2e>
 80025d2:	bd70      	pop	{r4, r5, r6, pc}
 80025d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80025d8:	4798      	blx	r3
 80025da:	3601      	adds	r6, #1
 80025dc:	e7ee      	b.n	80025bc <__libc_init_array+0xc>
 80025de:	f855 3b04 	ldr.w	r3, [r5], #4
 80025e2:	4798      	blx	r3
 80025e4:	3601      	adds	r6, #1
 80025e6:	e7f2      	b.n	80025ce <__libc_init_array+0x1e>
 80025e8:	08002650 	.word	0x08002650
 80025ec:	08002650 	.word	0x08002650
 80025f0:	08002650 	.word	0x08002650
 80025f4:	08002654 	.word	0x08002654

080025f8 <memset>:
 80025f8:	4402      	add	r2, r0
 80025fa:	4603      	mov	r3, r0
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d100      	bne.n	8002602 <memset+0xa>
 8002600:	4770      	bx	lr
 8002602:	f803 1b01 	strb.w	r1, [r3], #1
 8002606:	e7f9      	b.n	80025fc <memset+0x4>

08002608 <_init>:
 8002608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800260a:	bf00      	nop
 800260c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800260e:	bc08      	pop	{r3}
 8002610:	469e      	mov	lr, r3
 8002612:	4770      	bx	lr

08002614 <_fini>:
 8002614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002616:	bf00      	nop
 8002618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800261a:	bc08      	pop	{r3}
 800261c:	469e      	mov	lr, r3
 800261e:	4770      	bx	lr
